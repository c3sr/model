// Code generated by codecgen - DO NOT EDIT.

package model

import (
	"errors"
	pkg1_config "github.com/rai-project/config"
	pkg2_mongodb "github.com/rai-project/database/mongodb"
	codec1978 "github.com/ugorji/go/codec"
	"runtime"
	"strconv"
	"time"
	pkg3_db_v3 "upper.io/db.v3"
)

const (
	// ----- content types ----
	codecSelferCcUTF89405 = 1
	codecSelferCcRAW9405  = 0
	// ----- value types used ----
	codecSelferValueTypeArray9405  = 10
	codecSelferValueTypeMap9405    = 9
	codecSelferValueTypeString9405 = 6
	codecSelferValueTypeInt9405    = 2
	codecSelferValueTypeUint9405   = 3
	codecSelferValueTypeFloat9405  = 4
	codecSelferBitsize9405         = uint8(32 << (^uint(0) >> 63))
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct9405 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer9405 struct{}

func init() {
	if codec1978.GenVersion != 8 {
		_, file, _, _ := runtime.Caller(0)
		panic("codecgen version mismatch: current: 8, need " + strconv.FormatInt(int64(codec1978.GenVersion), 10) + ". Re-generate file: " + file)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg1_config.VersionInfo
		var v1 pkg2_mongodb.MongoTable
		var v2 time.Duration
		var v3 pkg3_db_v3.Database
		_, _, _, _ = v0, v1, v2, v3
	}
}

func (x *ACL) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(4)
			} else {
				r.WriteMapStart(4)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt4 := z.Extension(z.I2Rtid(x.MaxRuntimeLimit)); yyxt4 != nil {
					z.EncExtension(x.MaxRuntimeLimit, yyxt4)
				} else {
					r.EncodeInt(int64(x.MaxRuntimeLimit))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"MaxRuntimeLimit\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `MaxRuntimeLimit`)
				}
				r.WriteMapElemValue()
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.MaxRuntimeLimit)); yyxt5 != nil {
					z.EncExtension(x.MaxRuntimeLimit, yyxt5)
				} else {
					r.EncodeInt(int64(x.MaxRuntimeLimit))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeUint(uint64(x.MaxStorageLimit))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"MaxStorageLimit\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `MaxStorageLimit`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeUint(uint64(x.MaxStorageLimit))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.NetworkAccess))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"NetworkAccess\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `NetworkAccess`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.NetworkAccess))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.MountAccess))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"MountAccess\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `MountAccess`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.MountAccess))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *ACL) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap9405 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray9405 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9405)
		}
	}
}

func (x *ACL) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "MaxRuntimeLimit":
			if r.TryDecodeAsNil() {
				x.MaxRuntimeLimit = 0
			} else {
				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.MaxRuntimeLimit)); yyxt5 != nil {
					z.DecExtension(x.MaxRuntimeLimit, yyxt5)
				} else {
					x.MaxRuntimeLimit = (time.Duration)(r.DecodeInt64())
				}
			}
		case "MaxStorageLimit":
			if r.TryDecodeAsNil() {
				x.MaxStorageLimit = 0
			} else {
				x.MaxStorageLimit = (uint64)(r.DecodeUint64())
			}
		case "NetworkAccess":
			if r.TryDecodeAsNil() {
				x.NetworkAccess = false
			} else {
				x.NetworkAccess = (bool)(r.DecodeBool())
			}
		case "MountAccess":
			if r.TryDecodeAsNil() {
				x.MountAccess = false
			} else {
				x.MountAccess = (bool)(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *ACL) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj9 int
	var yyb9 bool
	var yyhl9 bool = l >= 0
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.MaxRuntimeLimit = 0
	} else {
		if false {
		} else if yyxt11 := z.Extension(z.I2Rtid(x.MaxRuntimeLimit)); yyxt11 != nil {
			z.DecExtension(x.MaxRuntimeLimit, yyxt11)
		} else {
			x.MaxRuntimeLimit = (time.Duration)(r.DecodeInt64())
		}
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.MaxStorageLimit = 0
	} else {
		x.MaxStorageLimit = (uint64)(r.DecodeUint64())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.NetworkAccess = false
	} else {
		x.NetworkAccess = (bool)(r.DecodeBool())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.MountAccess = false
	} else {
		x.MountAccess = (bool)(r.DecodeBool())
	}
	for {
		yyj9++
		if yyhl9 {
			yyb9 = yyj9 > l
		} else {
			yyb9 = r.CheckBreak()
		}
		if yyb9 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj9-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Base) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(4)
			} else {
				r.WriteMapStart(4)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.ID))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"id\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `id`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if !z.EncBasicHandle().TimeNotBuiltin {
					r.EncodeTime(x.CreatedAt)
				} else if yyxt7 := z.Extension(z.I2Rtid(x.CreatedAt)); yyxt7 != nil {
					z.EncExtension(x.CreatedAt, yyxt7)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.CreatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.CreatedAt)
				} else {
					z.EncFallback(x.CreatedAt)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF89405, `created_at`)
				r.WriteMapElemValue()
				if false {
				} else if !z.EncBasicHandle().TimeNotBuiltin {
					r.EncodeTime(x.CreatedAt)
				} else if yyxt8 := z.Extension(z.I2Rtid(x.CreatedAt)); yyxt8 != nil {
					z.EncExtension(x.CreatedAt, yyxt8)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.CreatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.CreatedAt)
				} else {
					z.EncFallback(x.CreatedAt)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if !z.EncBasicHandle().TimeNotBuiltin {
					r.EncodeTime(x.UpdatedAt)
				} else if yyxt10 := z.Extension(z.I2Rtid(x.UpdatedAt)); yyxt10 != nil {
					z.EncExtension(x.UpdatedAt, yyxt10)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.UpdatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.UpdatedAt)
				} else {
					z.EncFallback(x.UpdatedAt)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF89405, `updated_at`)
				r.WriteMapElemValue()
				if false {
				} else if !z.EncBasicHandle().TimeNotBuiltin {
					r.EncodeTime(x.UpdatedAt)
				} else if yyxt11 := z.Extension(z.I2Rtid(x.UpdatedAt)); yyxt11 != nil {
					z.EncExtension(x.UpdatedAt, yyxt11)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.UpdatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.UpdatedAt)
				} else {
					z.EncFallback(x.UpdatedAt)
				}
			}
			var yyn12 bool
			if x.DeletedAt == nil {
				yyn12 = true
				goto LABEL12
			}
		LABEL12:
			if yyr2 || yy2arr2 {
				if yyn12 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.DeletedAt == nil {
						r.EncodeNil()
					} else {
						yy13 := *x.DeletedAt
						if false {
						} else if !z.EncBasicHandle().TimeNotBuiltin {
							r.EncodeTime(yy13)
						} else if yyxt14 := z.Extension(z.I2Rtid(yy13)); yyxt14 != nil {
							z.EncExtension(yy13, yyxt14)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(yy13)
						} else if !z.EncBinary() && z.IsJSONHandle() {
							z.EncJSONMarshal(yy13)
						} else {
							z.EncFallback(yy13)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF89405, `deleted_at`)
				r.WriteMapElemValue()
				if yyn12 {
					r.EncodeNil()
				} else {
					if x.DeletedAt == nil {
						r.EncodeNil()
					} else {
						yy15 := *x.DeletedAt
						if false {
						} else if !z.EncBasicHandle().TimeNotBuiltin {
							r.EncodeTime(yy15)
						} else if yyxt16 := z.Extension(z.I2Rtid(yy15)); yyxt16 != nil {
							z.EncExtension(yy15, yyxt16)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(yy15)
						} else if !z.EncBinary() && z.IsJSONHandle() {
							z.EncJSONMarshal(yy15)
						} else {
							z.EncFallback(yy15)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *Base) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap9405 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray9405 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9405)
		}
	}
}

func (x *Base) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				x.ID = (string)(r.DecodeString())
			}
		case "created_at":
			if r.TryDecodeAsNil() {
				x.CreatedAt = time.Time{}
			} else {
				if false {
				} else if !z.DecBasicHandle().TimeNotBuiltin {
					x.CreatedAt = r.DecodeTime()
				} else if yyxt6 := z.Extension(z.I2Rtid(x.CreatedAt)); yyxt6 != nil {
					z.DecExtension(x.CreatedAt, yyxt6)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(&x.CreatedAt)
				} else if !z.DecBinary() && z.IsJSONHandle() {
					z.DecJSONUnmarshal(&x.CreatedAt)
				} else {
					z.DecFallback(&x.CreatedAt, false)
				}
			}
		case "updated_at":
			if r.TryDecodeAsNil() {
				x.UpdatedAt = time.Time{}
			} else {
				if false {
				} else if !z.DecBasicHandle().TimeNotBuiltin {
					x.UpdatedAt = r.DecodeTime()
				} else if yyxt8 := z.Extension(z.I2Rtid(x.UpdatedAt)); yyxt8 != nil {
					z.DecExtension(x.UpdatedAt, yyxt8)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(&x.UpdatedAt)
				} else if !z.DecBinary() && z.IsJSONHandle() {
					z.DecJSONUnmarshal(&x.UpdatedAt)
				} else {
					z.DecFallback(&x.UpdatedAt, false)
				}
			}
		case "deleted_at":
			if r.TryDecodeAsNil() {
				if true && x.DeletedAt != nil {
					x.DeletedAt = nil
				}
			} else {
				if x.DeletedAt == nil {
					x.DeletedAt = new(time.Time)
				}

				if false {
				} else if !z.DecBasicHandle().TimeNotBuiltin {
					*x.DeletedAt = r.DecodeTime()
				} else if yyxt10 := z.Extension(z.I2Rtid(x.DeletedAt)); yyxt10 != nil {
					z.DecExtension(x.DeletedAt, yyxt10)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.DeletedAt)
				} else if !z.DecBinary() && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletedAt)
				} else {
					z.DecFallback(x.DeletedAt, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *Base) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		x.ID = (string)(r.DecodeString())
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.CreatedAt = time.Time{}
	} else {
		if false {
		} else if !z.DecBasicHandle().TimeNotBuiltin {
			x.CreatedAt = r.DecodeTime()
		} else if yyxt14 := z.Extension(z.I2Rtid(x.CreatedAt)); yyxt14 != nil {
			z.DecExtension(x.CreatedAt, yyxt14)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(&x.CreatedAt)
		} else if !z.DecBinary() && z.IsJSONHandle() {
			z.DecJSONUnmarshal(&x.CreatedAt)
		} else {
			z.DecFallback(&x.CreatedAt, false)
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.UpdatedAt = time.Time{}
	} else {
		if false {
		} else if !z.DecBasicHandle().TimeNotBuiltin {
			x.UpdatedAt = r.DecodeTime()
		} else if yyxt16 := z.Extension(z.I2Rtid(x.UpdatedAt)); yyxt16 != nil {
			z.DecExtension(x.UpdatedAt, yyxt16)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(&x.UpdatedAt)
		} else if !z.DecBinary() && z.IsJSONHandle() {
			z.DecJSONUnmarshal(&x.UpdatedAt)
		} else {
			z.DecFallback(&x.UpdatedAt, false)
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.DeletedAt != nil {
			x.DeletedAt = nil
		}
	} else {
		if x.DeletedAt == nil {
			x.DeletedAt = new(time.Time)
		}

		if false {
		} else if !z.DecBasicHandle().TimeNotBuiltin {
			*x.DeletedAt = r.DecodeTime()
		} else if yyxt18 := z.Extension(z.I2Rtid(x.DeletedAt)); yyxt18 != nil {
			z.DecExtension(x.DeletedAt, yyxt18)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.DeletedAt)
		} else if !z.DecBinary() && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletedAt)
		} else {
			z.DecFallback(x.DeletedAt, false)
		}
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Credentials) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(2)
			} else {
				r.WriteMapStart(2)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Username))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"username\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `username`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Username))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Password))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"password\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `password`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Password))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *Credentials) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap9405 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray9405 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9405)
		}
	}
}

func (x *Credentials) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "username":
			if r.TryDecodeAsNil() {
				x.Username = ""
			} else {
				x.Username = (string)(r.DecodeString())
			}
		case "password":
			if r.TryDecodeAsNil() {
				x.Password = ""
			} else {
				x.Password = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *Credentials) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Username = ""
	} else {
		x.Username = (string)(r.DecodeString())
	}
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Password = ""
	} else {
		x.Password = (string)(r.DecodeString())
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	r.ReadArrayEnd()
}

func (x *JobRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(8)
			} else {
				r.WriteMapStart(8)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.ID))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"id\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `id`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if !z.EncBasicHandle().TimeNotBuiltin {
					r.EncodeTime(x.CreatedAt)
				} else if yyxt7 := z.Extension(z.I2Rtid(x.CreatedAt)); yyxt7 != nil {
					z.EncExtension(x.CreatedAt, yyxt7)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.CreatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.CreatedAt)
				} else {
					z.EncFallback(x.CreatedAt)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF89405, `created_at`)
				r.WriteMapElemValue()
				if false {
				} else if !z.EncBasicHandle().TimeNotBuiltin {
					r.EncodeTime(x.CreatedAt)
				} else if yyxt8 := z.Extension(z.I2Rtid(x.CreatedAt)); yyxt8 != nil {
					z.EncExtension(x.CreatedAt, yyxt8)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.CreatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.CreatedAt)
				} else {
					z.EncFallback(x.CreatedAt)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if !z.EncBasicHandle().TimeNotBuiltin {
					r.EncodeTime(x.UpdatedAt)
				} else if yyxt10 := z.Extension(z.I2Rtid(x.UpdatedAt)); yyxt10 != nil {
					z.EncExtension(x.UpdatedAt, yyxt10)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.UpdatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.UpdatedAt)
				} else {
					z.EncFallback(x.UpdatedAt)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF89405, `updated_at`)
				r.WriteMapElemValue()
				if false {
				} else if !z.EncBasicHandle().TimeNotBuiltin {
					r.EncodeTime(x.UpdatedAt)
				} else if yyxt11 := z.Extension(z.I2Rtid(x.UpdatedAt)); yyxt11 != nil {
					z.EncExtension(x.UpdatedAt, yyxt11)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.UpdatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.UpdatedAt)
				} else {
					z.EncFallback(x.UpdatedAt)
				}
			}
			var yyn12 bool
			if x.Base.DeletedAt == nil {
				yyn12 = true
				goto LABEL12
			}
		LABEL12:
			if yyr2 || yy2arr2 {
				if yyn12 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.DeletedAt == nil {
						r.EncodeNil()
					} else {
						yy13 := *x.DeletedAt
						if false {
						} else if !z.EncBasicHandle().TimeNotBuiltin {
							r.EncodeTime(yy13)
						} else if yyxt14 := z.Extension(z.I2Rtid(yy13)); yyxt14 != nil {
							z.EncExtension(yy13, yyxt14)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(yy13)
						} else if !z.EncBinary() && z.IsJSONHandle() {
							z.EncJSONMarshal(yy13)
						} else {
							z.EncFallback(yy13)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF89405, `deleted_at`)
				r.WriteMapElemValue()
				if yyn12 {
					r.EncodeNil()
				} else {
					if x.DeletedAt == nil {
						r.EncodeNil()
					} else {
						yy15 := *x.DeletedAt
						if false {
						} else if !z.EncBasicHandle().TimeNotBuiltin {
							r.EncodeTime(yy15)
						} else if yyxt16 := z.Extension(z.I2Rtid(yy15)); yyxt16 != nil {
							z.EncExtension(yy15, yyxt16)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(yy15)
						} else if !z.EncBinary() && z.IsJSONHandle() {
							z.EncJSONMarshal(yy15)
						} else {
							z.EncFallback(yy15)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy18 := &x.ClientVersion
				if false {
				} else if yyxt19 := z.Extension(z.I2Rtid(yy18)); yyxt19 != nil {
					z.EncExtension(yy18, yyxt19)
				} else {
					z.EncFallback(yy18)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF89405, `client_version`)
				r.WriteMapElemValue()
				yy20 := &x.ClientVersion
				if false {
				} else if yyxt21 := z.Extension(z.I2Rtid(yy20)); yyxt21 != nil {
					z.EncExtension(yy20, yyxt21)
				} else {
					z.EncFallback(yy20)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.UploadKey))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF89405, `upload_key`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.UploadKey))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy26 := &x.User
				yy26.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"user\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `user`)
				}
				r.WriteMapElemValue()
				yy28 := &x.User
				yy28.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy31 := &x.BuildSpecification
				yy31.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF89405, `build_specification`)
				r.WriteMapElemValue()
				yy33 := &x.BuildSpecification
				yy33.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *JobRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap9405 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray9405 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9405)
		}
	}
}

func (x *JobRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.Base.ID = ""
			} else {
				x.ID = (string)(r.DecodeString())
			}
		case "created_at":
			if r.TryDecodeAsNil() {
				x.Base.CreatedAt = time.Time{}
			} else {
				if false {
				} else if !z.DecBasicHandle().TimeNotBuiltin {
					x.CreatedAt = r.DecodeTime()
				} else if yyxt6 := z.Extension(z.I2Rtid(x.CreatedAt)); yyxt6 != nil {
					z.DecExtension(x.CreatedAt, yyxt6)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(&x.CreatedAt)
				} else if !z.DecBinary() && z.IsJSONHandle() {
					z.DecJSONUnmarshal(&x.CreatedAt)
				} else {
					z.DecFallback(&x.CreatedAt, false)
				}
			}
		case "updated_at":
			if r.TryDecodeAsNil() {
				x.Base.UpdatedAt = time.Time{}
			} else {
				if false {
				} else if !z.DecBasicHandle().TimeNotBuiltin {
					x.UpdatedAt = r.DecodeTime()
				} else if yyxt8 := z.Extension(z.I2Rtid(x.UpdatedAt)); yyxt8 != nil {
					z.DecExtension(x.UpdatedAt, yyxt8)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(&x.UpdatedAt)
				} else if !z.DecBinary() && z.IsJSONHandle() {
					z.DecJSONUnmarshal(&x.UpdatedAt)
				} else {
					z.DecFallback(&x.UpdatedAt, false)
				}
			}
		case "deleted_at":
			if r.TryDecodeAsNil() {
				if true && x.Base.DeletedAt != nil {
					x.Base.DeletedAt = nil
				}
			} else {
				if x.Base.DeletedAt == nil {
					x.Base.DeletedAt = new(time.Time)
				}

				if false {
				} else if !z.DecBasicHandle().TimeNotBuiltin {
					*x.DeletedAt = r.DecodeTime()
				} else if yyxt10 := z.Extension(z.I2Rtid(x.DeletedAt)); yyxt10 != nil {
					z.DecExtension(x.DeletedAt, yyxt10)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.DeletedAt)
				} else if !z.DecBinary() && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletedAt)
				} else {
					z.DecFallback(x.DeletedAt, false)
				}
			}
		case "client_version":
			if r.TryDecodeAsNil() {
				x.ClientVersion = pkg1_config.VersionInfo{}
			} else {
				if false {
				} else if yyxt12 := z.Extension(z.I2Rtid(x.ClientVersion)); yyxt12 != nil {
					z.DecExtension(x.ClientVersion, yyxt12)
				} else {
					z.DecFallback(&x.ClientVersion, false)
				}
			}
		case "upload_key":
			if r.TryDecodeAsNil() {
				x.UploadKey = ""
			} else {
				x.UploadKey = (string)(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = User{}
			} else {
				x.User.CodecDecodeSelf(d)
			}
		case "build_specification":
			if r.TryDecodeAsNil() {
				x.BuildSpecification = BuildSpecification{}
			} else {
				x.BuildSpecification.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *JobRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Base.ID = ""
	} else {
		x.ID = (string)(r.DecodeString())
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Base.CreatedAt = time.Time{}
	} else {
		if false {
		} else if !z.DecBasicHandle().TimeNotBuiltin {
			x.CreatedAt = r.DecodeTime()
		} else if yyxt19 := z.Extension(z.I2Rtid(x.CreatedAt)); yyxt19 != nil {
			z.DecExtension(x.CreatedAt, yyxt19)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(&x.CreatedAt)
		} else if !z.DecBinary() && z.IsJSONHandle() {
			z.DecJSONUnmarshal(&x.CreatedAt)
		} else {
			z.DecFallback(&x.CreatedAt, false)
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Base.UpdatedAt = time.Time{}
	} else {
		if false {
		} else if !z.DecBasicHandle().TimeNotBuiltin {
			x.UpdatedAt = r.DecodeTime()
		} else if yyxt21 := z.Extension(z.I2Rtid(x.UpdatedAt)); yyxt21 != nil {
			z.DecExtension(x.UpdatedAt, yyxt21)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(&x.UpdatedAt)
		} else if !z.DecBinary() && z.IsJSONHandle() {
			z.DecJSONUnmarshal(&x.UpdatedAt)
		} else {
			z.DecFallback(&x.UpdatedAt, false)
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Base.DeletedAt != nil {
			x.Base.DeletedAt = nil
		}
	} else {
		if x.Base.DeletedAt == nil {
			x.Base.DeletedAt = new(time.Time)
		}

		if false {
		} else if !z.DecBasicHandle().TimeNotBuiltin {
			*x.DeletedAt = r.DecodeTime()
		} else if yyxt23 := z.Extension(z.I2Rtid(x.DeletedAt)); yyxt23 != nil {
			z.DecExtension(x.DeletedAt, yyxt23)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.DeletedAt)
		} else if !z.DecBinary() && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletedAt)
		} else {
			z.DecFallback(x.DeletedAt, false)
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ClientVersion = pkg1_config.VersionInfo{}
	} else {
		if false {
		} else if yyxt25 := z.Extension(z.I2Rtid(x.ClientVersion)); yyxt25 != nil {
			z.DecExtension(x.ClientVersion, yyxt25)
		} else {
			z.DecFallback(&x.ClientVersion, false)
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.UploadKey = ""
	} else {
		x.UploadKey = (string)(r.DecodeString())
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.User = User{}
	} else {
		x.User.CodecDecodeSelf(d)
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.BuildSpecification = BuildSpecification{}
	} else {
		x.BuildSpecification.CodecDecodeSelf(d)
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	r.ReadArrayEnd()
}

func (x BuildCommands) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			h.encBuildCommands((BuildCommands)(x), e)
		}
	}
}

func (x *BuildCommands) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		h.decBuildCommands((*BuildCommands)(x), d)
	}
}

func (x *Push) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(4)
			} else {
				r.WriteMapStart(4)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.Push))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"push\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `push`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.Push))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.ImageName))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF89405, `image_name`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.ImageName))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Registry))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"registry\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `registry`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Registry))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy13 := &x.Credentials
				yy13.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"credentials\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `credentials`)
				}
				r.WriteMapElemValue()
				yy15 := &x.Credentials
				yy15.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *Push) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap9405 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray9405 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9405)
		}
	}
}

func (x *Push) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "push":
			if r.TryDecodeAsNil() {
				x.Push = false
			} else {
				x.Push = (bool)(r.DecodeBool())
			}
		case "image_name":
			if r.TryDecodeAsNil() {
				x.ImageName = ""
			} else {
				x.ImageName = (string)(r.DecodeString())
			}
		case "registry":
			if r.TryDecodeAsNil() {
				x.Registry = ""
			} else {
				x.Registry = (string)(r.DecodeString())
			}
		case "credentials":
			if r.TryDecodeAsNil() {
				x.Credentials = Credentials{}
			} else {
				x.Credentials.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *Push) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Push = false
	} else {
		x.Push = (bool)(r.DecodeBool())
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ImageName = ""
	} else {
		x.ImageName = (string)(r.DecodeString())
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Registry = ""
	} else {
		x.Registry = (string)(r.DecodeString())
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Credentials = Credentials{}
	} else {
		x.Credentials.CodecDecodeSelf(d)
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	r.ReadArrayEnd()
}

func (x *BuildImageSpecification) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(4)
			} else {
				r.WriteMapStart(4)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.ImageName))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF89405, `image_name`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.ImageName))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Dockerfile))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"dockerfile\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `dockerfile`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Dockerfile))
				}
			}
			var yyn9 bool
			if x.Push == nil {
				yyn9 = true
				goto LABEL9
			}
		LABEL9:
			if yyr2 || yy2arr2 {
				if yyn9 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Push == nil {
						r.EncodeNil()
					} else {
						x.Push.CodecEncodeSelf(e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"push\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `push`)
				}
				r.WriteMapElemValue()
				if yyn9 {
					r.EncodeNil()
				} else {
					if x.Push == nil {
						r.EncodeNil()
					} else {
						x.Push.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.NoCache))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF89405, `no_cache`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.NoCache))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *BuildImageSpecification) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap9405 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray9405 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9405)
		}
	}
}

func (x *BuildImageSpecification) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "image_name":
			if r.TryDecodeAsNil() {
				x.ImageName = ""
			} else {
				x.ImageName = (string)(r.DecodeString())
			}
		case "dockerfile":
			if r.TryDecodeAsNil() {
				x.Dockerfile = ""
			} else {
				x.Dockerfile = (string)(r.DecodeString())
			}
		case "push":
			if r.TryDecodeAsNil() {
				if true && x.Push != nil {
					x.Push = nil
				}
			} else {
				if x.Push == nil {
					x.Push = new(Push)
				}

				x.Push.CodecDecodeSelf(d)
			}
		case "no_cache":
			if r.TryDecodeAsNil() {
				x.NoCache = false
			} else {
				x.NoCache = (bool)(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *BuildImageSpecification) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ImageName = ""
	} else {
		x.ImageName = (string)(r.DecodeString())
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Dockerfile = ""
	} else {
		x.Dockerfile = (string)(r.DecodeString())
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Push != nil {
			x.Push = nil
		}
	} else {
		if x.Push == nil {
			x.Push = new(Push)
		}

		x.Push.CodecDecodeSelf(d)
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.NoCache = false
	} else {
		x.NoCache = (bool)(r.DecodeBool())
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	r.ReadArrayEnd()
}

func (x *RAIBuildSpecification) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(2)
			} else {
				r.WriteMapStart(2)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Version))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"version\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `version`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Version))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.ContainerImage))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"image\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `image`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.ContainerImage))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *RAIBuildSpecification) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap9405 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray9405 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9405)
		}
	}
}

func (x *RAIBuildSpecification) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "version":
			if r.TryDecodeAsNil() {
				x.Version = ""
			} else {
				x.Version = (string)(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.ContainerImage = ""
			} else {
				x.ContainerImage = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *RAIBuildSpecification) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Version = ""
	} else {
		x.Version = (string)(r.DecodeString())
	}
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ContainerImage = ""
	} else {
		x.ContainerImage = (string)(r.DecodeString())
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	r.ReadArrayEnd()
}

func (x *CommandsBuildSpecification) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [2]bool{     // should field at this index be written?
				x.BuildImage != nil, // BuildImage
				true,                // Build
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(2)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			var yyn3 bool
			if x.BuildImage == nil {
				yyn3 = true
				goto LABEL3
			}
		LABEL3:
			if yyr2 || yy2arr2 {
				if yyn3 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[0] {
						if x.BuildImage == nil {
							r.EncodeNil()
						} else {
							x.BuildImage.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF89405, `build_image`)
					r.WriteMapElemValue()
					if yyn3 {
						r.EncodeNil()
					} else {
						if x.BuildImage == nil {
							r.EncodeNil()
						} else {
							x.BuildImage.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Build == nil {
					r.EncodeNil()
				} else {
					x.Build.CodecEncodeSelf(e)
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"build\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `build`)
				}
				r.WriteMapElemValue()
				if x.Build == nil {
					r.EncodeNil()
				} else {
					x.Build.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *CommandsBuildSpecification) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap9405 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray9405 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9405)
		}
	}
}

func (x *CommandsBuildSpecification) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "build_image":
			if r.TryDecodeAsNil() {
				if true && x.BuildImage != nil {
					x.BuildImage = nil
				}
			} else {
				if x.BuildImage == nil {
					x.BuildImage = new(BuildImageSpecification)
				}

				x.BuildImage.CodecDecodeSelf(d)
			}
		case "build":
			if r.TryDecodeAsNil() {
				x.Build = nil
			} else {
				x.Build.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *CommandsBuildSpecification) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.BuildImage != nil {
			x.BuildImage = nil
		}
	} else {
		if x.BuildImage == nil {
			x.BuildImage = new(BuildImageSpecification)
		}

		x.BuildImage.CodecDecodeSelf(d)
	}
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Build = nil
	} else {
		x.Build.CodecDecodeSelf(d)
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	r.ReadArrayEnd()
}

func (x *BuildSpecification) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(3)
			} else {
				r.WriteMapStart(3)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy4 := &x.RAI
				yy4.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"rai\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `rai`)
				}
				r.WriteMapElemValue()
				yy6 := &x.RAI
				yy6.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy9 := &x.Resources
				yy9.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"resources\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `resources`)
				}
				r.WriteMapElemValue()
				yy11 := &x.Resources
				yy11.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy14 := &x.Commands
				yy14.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"commands\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `commands`)
				}
				r.WriteMapElemValue()
				yy16 := &x.Commands
				yy16.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *BuildSpecification) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap9405 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray9405 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9405)
		}
	}
}

func (x *BuildSpecification) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "rai":
			if r.TryDecodeAsNil() {
				x.RAI = RAIBuildSpecification{}
			} else {
				x.RAI.CodecDecodeSelf(d)
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = Resources{}
			} else {
				x.Resources.CodecDecodeSelf(d)
			}
		case "commands":
			if r.TryDecodeAsNil() {
				x.Commands = CommandsBuildSpecification{}
			} else {
				x.Commands.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *BuildSpecification) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.RAI = RAIBuildSpecification{}
	} else {
		x.RAI.CodecDecodeSelf(d)
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Resources = Resources{}
	} else {
		x.Resources.CodecDecodeSelf(d)
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Commands = CommandsBuildSpecification{}
	} else {
		x.Commands.CodecDecodeSelf(d)
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Resources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(3)
			} else {
				r.WriteMapStart(3)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy4 := &x.CPU
				yy4.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"cpu\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `cpu`)
				}
				r.WriteMapElemValue()
				yy6 := &x.CPU
				yy6.CodecEncodeSelf(e)
			}
			var yyn8 bool
			if x.GPU == nil {
				yyn8 = true
				goto LABEL8
			}
		LABEL8:
			if yyr2 || yy2arr2 {
				if yyn8 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.GPU == nil {
						r.EncodeNil()
					} else {
						x.GPU.CodecEncodeSelf(e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"gpu\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `gpu`)
				}
				r.WriteMapElemValue()
				if yyn8 {
					r.EncodeNil()
				} else {
					if x.GPU == nil {
						r.EncodeNil()
					} else {
						x.GPU.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.Network))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"network\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `network`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.Network))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *Resources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap9405 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray9405 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9405)
		}
	}
}

func (x *Resources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "cpu":
			if r.TryDecodeAsNil() {
				x.CPU = CPUResources{}
			} else {
				x.CPU.CodecDecodeSelf(d)
			}
		case "gpu":
			if r.TryDecodeAsNil() {
				if true && x.GPU != nil {
					x.GPU = nil
				}
			} else {
				if x.GPU == nil {
					x.GPU = new(GPUResources)
				}

				x.GPU.CodecDecodeSelf(d)
			}
		case "network":
			if r.TryDecodeAsNil() {
				x.Network = false
			} else {
				x.Network = (bool)(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *Resources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.CPU = CPUResources{}
	} else {
		x.CPU.CodecDecodeSelf(d)
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.GPU != nil {
			x.GPU = nil
		}
	} else {
		if x.GPU == nil {
			x.GPU = new(GPUResources)
		}

		x.GPU.CodecDecodeSelf(d)
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Network = false
	} else {
		x.Network = (bool)(r.DecodeBool())
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	r.ReadArrayEnd()
}

func (x *CPUResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				r.WriteMapStart(1)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Architecture))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"architecture\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `architecture`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Architecture))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *CPUResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap9405 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray9405 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9405)
		}
	}
}

func (x *CPUResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *CPUResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj5 int
	var yyb5 bool
	var yyhl5 bool = l >= 0
	yyj5++
	if yyhl5 {
		yyb5 = yyj5 > l
	} else {
		yyb5 = r.CheckBreak()
	}
	if yyb5 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = (string)(r.DecodeString())
	}
	for {
		yyj5++
		if yyhl5 {
			yyb5 = yyj5 > l
		} else {
			yyb5 = r.CheckBreak()
		}
		if yyb5 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj5-1, "")
	}
	r.ReadArrayEnd()
}

func (x *GPUResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(3)
			} else {
				r.WriteMapStart(3)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Architecture))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"architecture\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `architecture`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Architecture))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.Count))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"count\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `count`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.Count))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeInt(int64(x.Memory))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"memory\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `memory`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeInt(int64(x.Memory))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *GPUResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap9405 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray9405 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9405)
		}
	}
}

func (x *GPUResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = (string)(r.DecodeString())
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize9405))
			}
		case "memory":
			if r.TryDecodeAsNil() {
				x.Memory = 0
			} else {
				x.Memory = (int64)(r.DecodeInt64())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *GPUResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = (string)(r.DecodeString())
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize9405))
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Memory = 0
	} else {
		x.Memory = (int64)(r.DecodeInt64())
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	r.ReadArrayEnd()
}

func (x ResponseKind) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.EncExtension(x, yyxt1)
	} else {
		r.EncodeString(codecSelferCcUTF89405, string(x))
	}
}

func (x *ResponseKind) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		*x = (ResponseKind)(r.DecodeString())
	}
}

func (x *JobResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(4)
			} else {
				r.WriteMapStart(4)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.ID))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"id\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `id`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				x.Kind.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"kind\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `kind`)
				}
				r.WriteMapElemValue()
				x.Kind.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Body == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						r.EncodeStringBytes(codecSelferCcRAW9405, []byte(x.Body))
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"body\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `body`)
				}
				r.WriteMapElemValue()
				if x.Body == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						r.EncodeStringBytes(codecSelferCcRAW9405, []byte(x.Body))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if !z.EncBasicHandle().TimeNotBuiltin {
					r.EncodeTime(x.CreatedAt)
				} else if yyxt13 := z.Extension(z.I2Rtid(x.CreatedAt)); yyxt13 != nil {
					z.EncExtension(x.CreatedAt, yyxt13)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.CreatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.CreatedAt)
				} else {
					z.EncFallback(x.CreatedAt)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF89405, `created_at`)
				r.WriteMapElemValue()
				if false {
				} else if !z.EncBasicHandle().TimeNotBuiltin {
					r.EncodeTime(x.CreatedAt)
				} else if yyxt14 := z.Extension(z.I2Rtid(x.CreatedAt)); yyxt14 != nil {
					z.EncExtension(x.CreatedAt, yyxt14)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.CreatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.CreatedAt)
				} else {
					z.EncFallback(x.CreatedAt)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *JobResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap9405 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray9405 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9405)
		}
	}
}

func (x *JobResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				x.ID = (string)(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind.CodecDecodeSelf(d)
			}
		case "body":
			if r.TryDecodeAsNil() {
				x.Body = nil
			} else {
				if false {
				} else {
					x.Body = r.DecodeBytes(([]byte)(x.Body), false)
				}
			}
		case "created_at":
			if r.TryDecodeAsNil() {
				x.CreatedAt = time.Time{}
			} else {
				if false {
				} else if !z.DecBasicHandle().TimeNotBuiltin {
					x.CreatedAt = r.DecodeTime()
				} else if yyxt9 := z.Extension(z.I2Rtid(x.CreatedAt)); yyxt9 != nil {
					z.DecExtension(x.CreatedAt, yyxt9)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(&x.CreatedAt)
				} else if !z.DecBinary() && z.IsJSONHandle() {
					z.DecJSONUnmarshal(&x.CreatedAt)
				} else {
					z.DecFallback(&x.CreatedAt, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *JobResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		x.ID = (string)(r.DecodeString())
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind.CodecDecodeSelf(d)
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Body = nil
	} else {
		if false {
		} else {
			x.Body = r.DecodeBytes(([]byte)(x.Body), false)
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.CreatedAt = time.Time{}
	} else {
		if false {
		} else if !z.DecBasicHandle().TimeNotBuiltin {
			x.CreatedAt = r.DecodeTime()
		} else if yyxt16 := z.Extension(z.I2Rtid(x.CreatedAt)); yyxt16 != nil {
			z.DecExtension(x.CreatedAt, yyxt16)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(&x.CreatedAt)
		} else if !z.DecBinary() && z.IsJSONHandle() {
			z.DecJSONUnmarshal(&x.CreatedAt)
		} else {
			z.DecFallback(&x.CreatedAt, false)
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Team) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				r.WriteMapStart(1)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Name))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"name\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `name`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *Team) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap9405 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray9405 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9405)
		}
	}
}

func (x *Team) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *Team) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj5 int
	var yyb5 bool
	var yyhl5 bool = l >= 0
	yyj5++
	if yyhl5 {
		yyb5 = yyj5 > l
	} else {
		yyb5 = r.CheckBreak()
	}
	if yyb5 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = (string)(r.DecodeString())
	}
	for {
		yyj5++
		if yyhl5 {
			yyb5 = yyj5 > l
		} else {
			yyb5 = r.CheckBreak()
		}
		if yyb5 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj5-1, "")
	}
	r.ReadArrayEnd()
}

func (x *User) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [16]bool{    // should field at this index be written?
				true,               // ID
				true,               // CreatedAt
				true,               // UpdatedAt
				true,               // DeletedAt
				true,               // Firstname
				true,               // Lastname
				true,               // Username
				true,               // Email
				true,               // AccessKey
				true,               // SecretKey
				true,               // Affiliation
				true,               // Password
				true,               // Team
				x.DockerHub != nil, // DockerHub
				true,               // Role
				x.ACL != ACL{},     // ACL
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(16)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.ID))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"id\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `id`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if !z.EncBasicHandle().TimeNotBuiltin {
					r.EncodeTime(x.CreatedAt)
				} else if yyxt7 := z.Extension(z.I2Rtid(x.CreatedAt)); yyxt7 != nil {
					z.EncExtension(x.CreatedAt, yyxt7)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.CreatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.CreatedAt)
				} else {
					z.EncFallback(x.CreatedAt)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF89405, `created_at`)
				r.WriteMapElemValue()
				if false {
				} else if !z.EncBasicHandle().TimeNotBuiltin {
					r.EncodeTime(x.CreatedAt)
				} else if yyxt8 := z.Extension(z.I2Rtid(x.CreatedAt)); yyxt8 != nil {
					z.EncExtension(x.CreatedAt, yyxt8)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.CreatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.CreatedAt)
				} else {
					z.EncFallback(x.CreatedAt)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if !z.EncBasicHandle().TimeNotBuiltin {
					r.EncodeTime(x.UpdatedAt)
				} else if yyxt10 := z.Extension(z.I2Rtid(x.UpdatedAt)); yyxt10 != nil {
					z.EncExtension(x.UpdatedAt, yyxt10)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.UpdatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.UpdatedAt)
				} else {
					z.EncFallback(x.UpdatedAt)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF89405, `updated_at`)
				r.WriteMapElemValue()
				if false {
				} else if !z.EncBasicHandle().TimeNotBuiltin {
					r.EncodeTime(x.UpdatedAt)
				} else if yyxt11 := z.Extension(z.I2Rtid(x.UpdatedAt)); yyxt11 != nil {
					z.EncExtension(x.UpdatedAt, yyxt11)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.UpdatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.UpdatedAt)
				} else {
					z.EncFallback(x.UpdatedAt)
				}
			}
			var yyn12 bool
			if x.Base.DeletedAt == nil {
				yyn12 = true
				goto LABEL12
			}
		LABEL12:
			if yyr2 || yy2arr2 {
				if yyn12 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.DeletedAt == nil {
						r.EncodeNil()
					} else {
						yy13 := *x.DeletedAt
						if false {
						} else if !z.EncBasicHandle().TimeNotBuiltin {
							r.EncodeTime(yy13)
						} else if yyxt14 := z.Extension(z.I2Rtid(yy13)); yyxt14 != nil {
							z.EncExtension(yy13, yyxt14)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(yy13)
						} else if !z.EncBinary() && z.IsJSONHandle() {
							z.EncJSONMarshal(yy13)
						} else {
							z.EncFallback(yy13)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF89405, `deleted_at`)
				r.WriteMapElemValue()
				if yyn12 {
					r.EncodeNil()
				} else {
					if x.DeletedAt == nil {
						r.EncodeNil()
					} else {
						yy15 := *x.DeletedAt
						if false {
						} else if !z.EncBasicHandle().TimeNotBuiltin {
							r.EncodeTime(yy15)
						} else if yyxt16 := z.Extension(z.I2Rtid(yy15)); yyxt16 != nil {
							z.EncExtension(yy15, yyxt16)
						} else if z.EncBinary() {
							z.EncBinaryMarshal(yy15)
						} else if !z.EncBinary() && z.IsJSONHandle() {
							z.EncJSONMarshal(yy15)
						} else {
							z.EncFallback(yy15)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Firstname))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"firstname\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `firstname`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Firstname))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Lastname))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"lastname\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `lastname`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Lastname))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Username))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"username\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `username`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Username))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Email))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"email\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `email`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Email))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.AccessKey))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF89405, `access_key`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.AccessKey))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.SecretKey))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF89405, `secret_key`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.SecretKey))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Affiliation))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"affiliation\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `affiliation`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Affiliation))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Password))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"password\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `password`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Password))
				}
			}
			var yyn41 bool
			if x.Team == nil {
				yyn41 = true
				goto LABEL41
			}
		LABEL41:
			if yyr2 || yy2arr2 {
				if yyn41 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Team == nil {
						r.EncodeNil()
					} else {
						x.Team.CodecEncodeSelf(e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"team\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `team`)
				}
				r.WriteMapElemValue()
				if yyn41 {
					r.EncodeNil()
				} else {
					if x.Team == nil {
						r.EncodeNil()
					} else {
						x.Team.CodecEncodeSelf(e)
					}
				}
			}
			var yyn44 bool
			if x.DockerHub == nil {
				yyn44 = true
				goto LABEL44
			}
		LABEL44:
			if yyr2 || yy2arr2 {
				if yyn44 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[13] {
						if x.DockerHub == nil {
							r.EncodeNil()
						} else {
							x.DockerHub.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[13] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"dockerhub\"")
					} else {
						r.EncodeString(codecSelferCcUTF89405, `dockerhub`)
					}
					r.WriteMapElemValue()
					if yyn44 {
						r.EncodeNil()
					} else {
						if x.DockerHub == nil {
							r.EncodeNil()
						} else {
							x.DockerHub.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Role))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"role\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `role`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Role))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[15] {
					yy51 := &x.ACL
					yy51.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[15] {
					r.WriteMapElemKey()
					if z.IsJSONHandle() {
						z.WriteStr("\"acl\"")
					} else {
						r.EncodeString(codecSelferCcUTF89405, `acl`)
					}
					r.WriteMapElemValue()
					yy53 := &x.ACL
					yy53.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *User) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap9405 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray9405 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9405)
		}
	}
}

func (x *User) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.Base.ID = ""
			} else {
				x.ID = (string)(r.DecodeString())
			}
		case "created_at":
			if r.TryDecodeAsNil() {
				x.Base.CreatedAt = time.Time{}
			} else {
				if false {
				} else if !z.DecBasicHandle().TimeNotBuiltin {
					x.CreatedAt = r.DecodeTime()
				} else if yyxt6 := z.Extension(z.I2Rtid(x.CreatedAt)); yyxt6 != nil {
					z.DecExtension(x.CreatedAt, yyxt6)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(&x.CreatedAt)
				} else if !z.DecBinary() && z.IsJSONHandle() {
					z.DecJSONUnmarshal(&x.CreatedAt)
				} else {
					z.DecFallback(&x.CreatedAt, false)
				}
			}
		case "updated_at":
			if r.TryDecodeAsNil() {
				x.Base.UpdatedAt = time.Time{}
			} else {
				if false {
				} else if !z.DecBasicHandle().TimeNotBuiltin {
					x.UpdatedAt = r.DecodeTime()
				} else if yyxt8 := z.Extension(z.I2Rtid(x.UpdatedAt)); yyxt8 != nil {
					z.DecExtension(x.UpdatedAt, yyxt8)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(&x.UpdatedAt)
				} else if !z.DecBinary() && z.IsJSONHandle() {
					z.DecJSONUnmarshal(&x.UpdatedAt)
				} else {
					z.DecFallback(&x.UpdatedAt, false)
				}
			}
		case "deleted_at":
			if r.TryDecodeAsNil() {
				if true && x.Base.DeletedAt != nil {
					x.Base.DeletedAt = nil
				}
			} else {
				if x.Base.DeletedAt == nil {
					x.Base.DeletedAt = new(time.Time)
				}

				if false {
				} else if !z.DecBasicHandle().TimeNotBuiltin {
					*x.DeletedAt = r.DecodeTime()
				} else if yyxt10 := z.Extension(z.I2Rtid(x.DeletedAt)); yyxt10 != nil {
					z.DecExtension(x.DeletedAt, yyxt10)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.DeletedAt)
				} else if !z.DecBinary() && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletedAt)
				} else {
					z.DecFallback(x.DeletedAt, false)
				}
			}
		case "firstname":
			if r.TryDecodeAsNil() {
				x.Firstname = ""
			} else {
				x.Firstname = (string)(r.DecodeString())
			}
		case "lastname":
			if r.TryDecodeAsNil() {
				x.Lastname = ""
			} else {
				x.Lastname = (string)(r.DecodeString())
			}
		case "username":
			if r.TryDecodeAsNil() {
				x.Username = ""
			} else {
				x.Username = (string)(r.DecodeString())
			}
		case "email":
			if r.TryDecodeAsNil() {
				x.Email = ""
			} else {
				x.Email = (string)(r.DecodeString())
			}
		case "access_key":
			if r.TryDecodeAsNil() {
				x.AccessKey = ""
			} else {
				x.AccessKey = (string)(r.DecodeString())
			}
		case "secret_key":
			if r.TryDecodeAsNil() {
				x.SecretKey = ""
			} else {
				x.SecretKey = (string)(r.DecodeString())
			}
		case "affiliation":
			if r.TryDecodeAsNil() {
				x.Affiliation = ""
			} else {
				x.Affiliation = (string)(r.DecodeString())
			}
		case "password":
			if r.TryDecodeAsNil() {
				x.Password = ""
			} else {
				x.Password = (string)(r.DecodeString())
			}
		case "team":
			if r.TryDecodeAsNil() {
				if true && x.Team != nil {
					x.Team = nil
				}
			} else {
				if x.Team == nil {
					x.Team = new(Team)
				}

				x.Team.CodecDecodeSelf(d)
			}
		case "dockerhub":
			if r.TryDecodeAsNil() {
				if true && x.DockerHub != nil {
					x.DockerHub = nil
				}
			} else {
				if x.DockerHub == nil {
					x.DockerHub = new(Credentials)
				}

				x.DockerHub.CodecDecodeSelf(d)
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = (string)(r.DecodeString())
			}
		case "acl":
			if r.TryDecodeAsNil() {
				x.ACL = ACL{}
			} else {
				x.ACL.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *User) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj23 int
	var yyb23 bool
	var yyhl23 bool = l >= 0
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Base.ID = ""
	} else {
		x.ID = (string)(r.DecodeString())
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Base.CreatedAt = time.Time{}
	} else {
		if false {
		} else if !z.DecBasicHandle().TimeNotBuiltin {
			x.CreatedAt = r.DecodeTime()
		} else if yyxt26 := z.Extension(z.I2Rtid(x.CreatedAt)); yyxt26 != nil {
			z.DecExtension(x.CreatedAt, yyxt26)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(&x.CreatedAt)
		} else if !z.DecBinary() && z.IsJSONHandle() {
			z.DecJSONUnmarshal(&x.CreatedAt)
		} else {
			z.DecFallback(&x.CreatedAt, false)
		}
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Base.UpdatedAt = time.Time{}
	} else {
		if false {
		} else if !z.DecBasicHandle().TimeNotBuiltin {
			x.UpdatedAt = r.DecodeTime()
		} else if yyxt28 := z.Extension(z.I2Rtid(x.UpdatedAt)); yyxt28 != nil {
			z.DecExtension(x.UpdatedAt, yyxt28)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(&x.UpdatedAt)
		} else if !z.DecBinary() && z.IsJSONHandle() {
			z.DecJSONUnmarshal(&x.UpdatedAt)
		} else {
			z.DecFallback(&x.UpdatedAt, false)
		}
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Base.DeletedAt != nil {
			x.Base.DeletedAt = nil
		}
	} else {
		if x.Base.DeletedAt == nil {
			x.Base.DeletedAt = new(time.Time)
		}

		if false {
		} else if !z.DecBasicHandle().TimeNotBuiltin {
			*x.DeletedAt = r.DecodeTime()
		} else if yyxt30 := z.Extension(z.I2Rtid(x.DeletedAt)); yyxt30 != nil {
			z.DecExtension(x.DeletedAt, yyxt30)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.DeletedAt)
		} else if !z.DecBinary() && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletedAt)
		} else {
			z.DecFallback(x.DeletedAt, false)
		}
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Firstname = ""
	} else {
		x.Firstname = (string)(r.DecodeString())
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Lastname = ""
	} else {
		x.Lastname = (string)(r.DecodeString())
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Username = ""
	} else {
		x.Username = (string)(r.DecodeString())
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Email = ""
	} else {
		x.Email = (string)(r.DecodeString())
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.AccessKey = ""
	} else {
		x.AccessKey = (string)(r.DecodeString())
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.SecretKey = ""
	} else {
		x.SecretKey = (string)(r.DecodeString())
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Affiliation = ""
	} else {
		x.Affiliation = (string)(r.DecodeString())
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Password = ""
	} else {
		x.Password = (string)(r.DecodeString())
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.Team != nil {
			x.Team = nil
		}
	} else {
		if x.Team == nil {
			x.Team = new(Team)
		}

		x.Team.CodecDecodeSelf(d)
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.DockerHub != nil {
			x.DockerHub = nil
		}
	} else {
		if x.DockerHub == nil {
			x.DockerHub = new(Credentials)
		}

		x.DockerHub.CodecDecodeSelf(d)
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = (string)(r.DecodeString())
	}
	yyj23++
	if yyhl23 {
		yyb23 = yyj23 > l
	} else {
		yyb23 = r.CheckBreak()
	}
	if yyb23 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ACL = ACL{}
	} else {
		x.ACL.CodecDecodeSelf(d)
	}
	for {
		yyj23++
		if yyhl23 {
			yyb23 = yyj23 > l
		} else {
			yyb23 = r.CheckBreak()
		}
		if yyb23 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj23-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Ece408Inference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(6)
			} else {
				r.WriteMapStart(6)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Model))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"Model\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `Model`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Model))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeFloat64(float64(x.Correctness))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"Correctness\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `Correctness`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeFloat64(float64(x.Correctness))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.OpRuntimes == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicetime_Duration(([]time.Duration)(x.OpRuntimes), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"OpRuntimes\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `OpRuntimes`)
				}
				r.WriteMapElemValue()
				if x.OpRuntimes == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicetime_Duration(([]time.Duration)(x.OpRuntimes), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt13 := z.Extension(z.I2Rtid(x.UserFullRuntime)); yyxt13 != nil {
					z.EncExtension(x.UserFullRuntime, yyxt13)
				} else {
					r.EncodeInt(int64(x.UserFullRuntime))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"UserFullRuntime\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `UserFullRuntime`)
				}
				r.WriteMapElemValue()
				if false {
				} else if yyxt14 := z.Extension(z.I2Rtid(x.UserFullRuntime)); yyxt14 != nil {
					z.EncExtension(x.UserFullRuntime, yyxt14)
				} else {
					r.EncodeInt(int64(x.UserFullRuntime))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt16 := z.Extension(z.I2Rtid(x.SystemFullRuntime)); yyxt16 != nil {
					z.EncExtension(x.SystemFullRuntime, yyxt16)
				} else {
					r.EncodeInt(int64(x.SystemFullRuntime))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"SystemFullRuntime\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `SystemFullRuntime`)
				}
				r.WriteMapElemValue()
				if false {
				} else if yyxt17 := z.Extension(z.I2Rtid(x.SystemFullRuntime)); yyxt17 != nil {
					z.EncExtension(x.SystemFullRuntime, yyxt17)
				} else {
					r.EncodeInt(int64(x.SystemFullRuntime))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if yyxt19 := z.Extension(z.I2Rtid(x.ElapsedFullRuntime)); yyxt19 != nil {
					z.EncExtension(x.ElapsedFullRuntime, yyxt19)
				} else {
					r.EncodeInt(int64(x.ElapsedFullRuntime))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"ElapsedFullRuntime\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `ElapsedFullRuntime`)
				}
				r.WriteMapElemValue()
				if false {
				} else if yyxt20 := z.Extension(z.I2Rtid(x.ElapsedFullRuntime)); yyxt20 != nil {
					z.EncExtension(x.ElapsedFullRuntime, yyxt20)
				} else {
					r.EncodeInt(int64(x.ElapsedFullRuntime))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *Ece408Inference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap9405 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray9405 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9405)
		}
	}
}

func (x *Ece408Inference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Model":
			if r.TryDecodeAsNil() {
				x.Model = ""
			} else {
				x.Model = (string)(r.DecodeString())
			}
		case "Correctness":
			if r.TryDecodeAsNil() {
				x.Correctness = 0
			} else {
				x.Correctness = (float64)(r.DecodeFloat64())
			}
		case "OpRuntimes":
			if r.TryDecodeAsNil() {
				x.OpRuntimes = nil
			} else {
				if false {
				} else {
					h.decSlicetime_Duration((*[]time.Duration)(&x.OpRuntimes), d)
				}
			}
		case "UserFullRuntime":
			if r.TryDecodeAsNil() {
				x.UserFullRuntime = 0
			} else {
				if false {
				} else if yyxt9 := z.Extension(z.I2Rtid(x.UserFullRuntime)); yyxt9 != nil {
					z.DecExtension(x.UserFullRuntime, yyxt9)
				} else {
					x.UserFullRuntime = (time.Duration)(r.DecodeInt64())
				}
			}
		case "SystemFullRuntime":
			if r.TryDecodeAsNil() {
				x.SystemFullRuntime = 0
			} else {
				if false {
				} else if yyxt11 := z.Extension(z.I2Rtid(x.SystemFullRuntime)); yyxt11 != nil {
					z.DecExtension(x.SystemFullRuntime, yyxt11)
				} else {
					x.SystemFullRuntime = (time.Duration)(r.DecodeInt64())
				}
			}
		case "ElapsedFullRuntime":
			if r.TryDecodeAsNil() {
				x.ElapsedFullRuntime = 0
			} else {
				if false {
				} else if yyxt13 := z.Extension(z.I2Rtid(x.ElapsedFullRuntime)); yyxt13 != nil {
					z.DecExtension(x.ElapsedFullRuntime, yyxt13)
				} else {
					x.ElapsedFullRuntime = (time.Duration)(r.DecodeInt64())
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *Ece408Inference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Model = ""
	} else {
		x.Model = (string)(r.DecodeString())
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Correctness = 0
	} else {
		x.Correctness = (float64)(r.DecodeFloat64())
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.OpRuntimes = nil
	} else {
		if false {
		} else {
			h.decSlicetime_Duration((*[]time.Duration)(&x.OpRuntimes), d)
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.UserFullRuntime = 0
	} else {
		if false {
		} else if yyxt20 := z.Extension(z.I2Rtid(x.UserFullRuntime)); yyxt20 != nil {
			z.DecExtension(x.UserFullRuntime, yyxt20)
		} else {
			x.UserFullRuntime = (time.Duration)(r.DecodeInt64())
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.SystemFullRuntime = 0
	} else {
		if false {
		} else if yyxt22 := z.Extension(z.I2Rtid(x.SystemFullRuntime)); yyxt22 != nil {
			z.DecExtension(x.SystemFullRuntime, yyxt22)
		} else {
			x.SystemFullRuntime = (time.Duration)(r.DecodeInt64())
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ElapsedFullRuntime = 0
	} else {
		if false {
		} else if yyxt24 := z.Extension(z.I2Rtid(x.ElapsedFullRuntime)); yyxt24 != nil {
			z.DecExtension(x.ElapsedFullRuntime, yyxt24)
		} else {
			x.ElapsedFullRuntime = (time.Duration)(r.DecodeInt64())
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ECE408Ranking) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(6)
			} else {
				r.WriteMapStart(6)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if !z.EncBasicHandle().TimeNotBuiltin {
					r.EncodeTime(x.CreatedAt)
				} else if yyxt4 := z.Extension(z.I2Rtid(x.CreatedAt)); yyxt4 != nil {
					z.EncExtension(x.CreatedAt, yyxt4)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.CreatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.CreatedAt)
				} else {
					z.EncFallback(x.CreatedAt)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF89405, `created_at`)
				r.WriteMapElemValue()
				if false {
				} else if !z.EncBasicHandle().TimeNotBuiltin {
					r.EncodeTime(x.CreatedAt)
				} else if yyxt5 := z.Extension(z.I2Rtid(x.CreatedAt)); yyxt5 != nil {
					z.EncExtension(x.CreatedAt, yyxt5)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.CreatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.CreatedAt)
				} else {
					z.EncFallback(x.CreatedAt)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Username))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"Username\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `Username`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Username))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Teamname))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"Teamname\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `Teamname`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Teamname))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.ProjectURL))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"ProjectURL\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `ProjectURL`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.ProjectURL))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.IsSubmission))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"IsSubmission\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `IsSubmission`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.IsSubmission))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.SubmissionTag))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"SubmissionTag\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `SubmissionTag`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.SubmissionTag))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *ECE408Ranking) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap9405 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray9405 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9405)
		}
	}
}

func (x *ECE408Ranking) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "created_at":
			if r.TryDecodeAsNil() {
				x.CreatedAt = time.Time{}
			} else {
				if false {
				} else if !z.DecBasicHandle().TimeNotBuiltin {
					x.CreatedAt = r.DecodeTime()
				} else if yyxt5 := z.Extension(z.I2Rtid(x.CreatedAt)); yyxt5 != nil {
					z.DecExtension(x.CreatedAt, yyxt5)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(&x.CreatedAt)
				} else if !z.DecBinary() && z.IsJSONHandle() {
					z.DecJSONUnmarshal(&x.CreatedAt)
				} else {
					z.DecFallback(&x.CreatedAt, false)
				}
			}
		case "Username":
			if r.TryDecodeAsNil() {
				x.Username = ""
			} else {
				x.Username = (string)(r.DecodeString())
			}
		case "Teamname":
			if r.TryDecodeAsNil() {
				x.Teamname = ""
			} else {
				x.Teamname = (string)(r.DecodeString())
			}
		case "ProjectURL":
			if r.TryDecodeAsNil() {
				x.ProjectURL = ""
			} else {
				x.ProjectURL = (string)(r.DecodeString())
			}
		case "IsSubmission":
			if r.TryDecodeAsNil() {
				x.IsSubmission = false
			} else {
				x.IsSubmission = (bool)(r.DecodeBool())
			}
		case "SubmissionTag":
			if r.TryDecodeAsNil() {
				x.SubmissionTag = ""
			} else {
				x.SubmissionTag = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *ECE408Ranking) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.CreatedAt = time.Time{}
	} else {
		if false {
		} else if !z.DecBasicHandle().TimeNotBuiltin {
			x.CreatedAt = r.DecodeTime()
		} else if yyxt13 := z.Extension(z.I2Rtid(x.CreatedAt)); yyxt13 != nil {
			z.DecExtension(x.CreatedAt, yyxt13)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(&x.CreatedAt)
		} else if !z.DecBinary() && z.IsJSONHandle() {
			z.DecJSONUnmarshal(&x.CreatedAt)
		} else {
			z.DecFallback(&x.CreatedAt, false)
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Username = ""
	} else {
		x.Username = (string)(r.DecodeString())
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Teamname = ""
	} else {
		x.Teamname = (string)(r.DecodeString())
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ProjectURL = ""
	} else {
		x.ProjectURL = (string)(r.DecodeString())
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.IsSubmission = false
	} else {
		x.IsSubmission = (bool)(r.DecodeBool())
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.SubmissionTag = ""
	} else {
		x.SubmissionTag = (string)(r.DecodeString())
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Ece408JobResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(7)
			} else {
				r.WriteMapStart(7)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else if !z.EncBasicHandle().TimeNotBuiltin {
					r.EncodeTime(x.CreatedAt)
				} else if yyxt4 := z.Extension(z.I2Rtid(x.CreatedAt)); yyxt4 != nil {
					z.EncExtension(x.CreatedAt, yyxt4)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.CreatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.CreatedAt)
				} else {
					z.EncFallback(x.CreatedAt)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF89405, `created_at`)
				r.WriteMapElemValue()
				if false {
				} else if !z.EncBasicHandle().TimeNotBuiltin {
					r.EncodeTime(x.CreatedAt)
				} else if yyxt5 := z.Extension(z.I2Rtid(x.CreatedAt)); yyxt5 != nil {
					z.EncExtension(x.CreatedAt, yyxt5)
				} else if z.EncBinary() {
					z.EncBinaryMarshal(x.CreatedAt)
				} else if !z.EncBinary() && z.IsJSONHandle() {
					z.EncJSONMarshal(x.CreatedAt)
				} else {
					z.EncFallback(x.CreatedAt)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Username))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"Username\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `Username`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Username))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Teamname))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"Teamname\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `Teamname`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.Teamname))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.ProjectURL))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"ProjectURL\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `ProjectURL`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.ProjectURL))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeBool(bool(x.IsSubmission))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"IsSubmission\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `IsSubmission`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeBool(bool(x.IsSubmission))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.SubmissionTag))
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"SubmissionTag\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `SubmissionTag`)
				}
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF89405, string(x.SubmissionTag))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Inferences == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceEce408Inference(([]Ece408Inference)(x.Inferences), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"Inferences\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `Inferences`)
				}
				r.WriteMapElemValue()
				if x.Inferences == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceEce408Inference(([]Ece408Inference)(x.Inferences), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *Ece408JobResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap9405 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray9405 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9405)
		}
	}
}

func (x *Ece408JobResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "created_at":
			if r.TryDecodeAsNil() {
				x.ECE408Ranking.CreatedAt = time.Time{}
			} else {
				if false {
				} else if !z.DecBasicHandle().TimeNotBuiltin {
					x.CreatedAt = r.DecodeTime()
				} else if yyxt5 := z.Extension(z.I2Rtid(x.CreatedAt)); yyxt5 != nil {
					z.DecExtension(x.CreatedAt, yyxt5)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(&x.CreatedAt)
				} else if !z.DecBinary() && z.IsJSONHandle() {
					z.DecJSONUnmarshal(&x.CreatedAt)
				} else {
					z.DecFallback(&x.CreatedAt, false)
				}
			}
		case "Username":
			if r.TryDecodeAsNil() {
				x.ECE408Ranking.Username = ""
			} else {
				x.Username = (string)(r.DecodeString())
			}
		case "Teamname":
			if r.TryDecodeAsNil() {
				x.ECE408Ranking.Teamname = ""
			} else {
				x.Teamname = (string)(r.DecodeString())
			}
		case "ProjectURL":
			if r.TryDecodeAsNil() {
				x.ECE408Ranking.ProjectURL = ""
			} else {
				x.ProjectURL = (string)(r.DecodeString())
			}
		case "IsSubmission":
			if r.TryDecodeAsNil() {
				x.ECE408Ranking.IsSubmission = false
			} else {
				x.IsSubmission = (bool)(r.DecodeBool())
			}
		case "SubmissionTag":
			if r.TryDecodeAsNil() {
				x.ECE408Ranking.SubmissionTag = ""
			} else {
				x.SubmissionTag = (string)(r.DecodeString())
			}
		case "Inferences":
			if r.TryDecodeAsNil() {
				x.Inferences = nil
			} else {
				if false {
				} else {
					h.decSliceEce408Inference((*[]Ece408Inference)(&x.Inferences), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *Ece408JobResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj13 int
	var yyb13 bool
	var yyhl13 bool = l >= 0
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ECE408Ranking.CreatedAt = time.Time{}
	} else {
		if false {
		} else if !z.DecBasicHandle().TimeNotBuiltin {
			x.CreatedAt = r.DecodeTime()
		} else if yyxt15 := z.Extension(z.I2Rtid(x.CreatedAt)); yyxt15 != nil {
			z.DecExtension(x.CreatedAt, yyxt15)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(&x.CreatedAt)
		} else if !z.DecBinary() && z.IsJSONHandle() {
			z.DecJSONUnmarshal(&x.CreatedAt)
		} else {
			z.DecFallback(&x.CreatedAt, false)
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ECE408Ranking.Username = ""
	} else {
		x.Username = (string)(r.DecodeString())
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ECE408Ranking.Teamname = ""
	} else {
		x.Teamname = (string)(r.DecodeString())
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ECE408Ranking.ProjectURL = ""
	} else {
		x.ProjectURL = (string)(r.DecodeString())
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ECE408Ranking.IsSubmission = false
	} else {
		x.IsSubmission = (bool)(r.DecodeBool())
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ECE408Ranking.SubmissionTag = ""
	} else {
		x.SubmissionTag = (string)(r.DecodeString())
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Inferences = nil
	} else {
		if false {
		} else {
			h.decSliceEce408Inference((*[]Ece408Inference)(&x.Inferences), d)
		}
	}
	for {
		yyj13++
		if yyhl13 {
			yyb13 = yyj13 > l
		} else {
			yyb13 = r.CheckBreak()
		}
		if yyb13 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj13-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Ece408JobResponseCollection) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				r.WriteMapStart(1)
			}
			var yyn3 bool
			if x.MongoTable == nil {
				yyn3 = true
				goto LABEL3
			}
		LABEL3:
			if yyr2 || yy2arr2 {
				if yyn3 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if x.Session == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt4 := z.Extension(z.I2Rtid(x.Session)); yyxt4 != nil {
							z.EncExtension(x.Session, yyxt4)
						} else {
							z.EncFallback(x.Session)
						}
					}
				}
			} else {
				r.WriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"Session\"")
				} else {
					r.EncodeString(codecSelferCcUTF89405, `Session`)
				}
				r.WriteMapElemValue()
				if yyn3 {
					r.EncodeNil()
				} else {
					if x.Session == nil {
						r.EncodeNil()
					} else {
						if false {
						} else if yyxt5 := z.Extension(z.I2Rtid(x.Session)); yyxt5 != nil {
							z.EncExtension(x.Session, yyxt5)
						} else {
							z.EncFallback(x.Session)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *Ece408JobResponseCollection) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap9405 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray9405 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct9405)
		}
	}
}

func (x *Ece408JobResponseCollection) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "Session":
			if r.TryDecodeAsNil() {
				if true && x.MongoTable != nil {
					x.MongoTable.Session = nil
				}
			} else {
				if x.MongoTable == nil {
					x.MongoTable = new(pkg2_mongodb.MongoTable)
				}

				if false {
				} else if yyxt5 := z.Extension(z.I2Rtid(x.Session)); yyxt5 != nil {
					z.DecExtension(x.Session, yyxt5)
				} else {
					z.DecFallback(&x.Session, true)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *Ece408JobResponseCollection) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.MongoTable != nil {
			x.MongoTable.Session = nil
		}
	} else {
		if x.MongoTable == nil {
			x.MongoTable = new(pkg2_mongodb.MongoTable)
		}

		if false {
		} else if yyxt8 := z.Extension(z.I2Rtid(x.Session)); yyxt8 != nil {
			z.DecExtension(x.Session, yyxt8)
		} else {
			z.DecFallback(&x.Session, true)
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	r.ReadArrayEnd()
}

func (x Ece408JobResponses) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			h.encEce408JobResponses((Ece408JobResponses)(x), e)
		}
	}
}

func (x *Ece408JobResponses) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		h.decEce408JobResponses((*Ece408JobResponses)(x), d)
	}
}

func (x ByMinOpRuntime) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			h.encByMinOpRuntime((ByMinOpRuntime)(x), e)
		}
	}
}

func (x *ByMinOpRuntime) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		h.decByMinOpRuntime((*ByMinOpRuntime)(x), d)
	}
}

func (x codecSelfer9405) encBuildCommands(v BuildCommands, e *codec1978.Encoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if false {
		} else {
			r.EncodeString(codecSelferCcUTF89405, string(yyv1))
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer9405) decBuildCommands(v *BuildCommands, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []string{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]string, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]string, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, "")
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = ""
				} else {
					yyv1[yyj1] = (string)(r.DecodeString())
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]string, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer9405) encSlicetime_Duration(v []time.Duration, e *codec1978.Encoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if false {
		} else if yyxt2 := z.Extension(z.I2Rtid(yyv1)); yyxt2 != nil {
			z.EncExtension(yyv1, yyxt2)
		} else {
			r.EncodeInt(int64(yyv1))
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer9405) decSlicetime_Duration(v *[]time.Duration, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []time.Duration{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]time.Duration, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]time.Duration, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, 0)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = 0
				} else {
					if false {
					} else if yyxt3 := z.Extension(z.I2Rtid(yyv1[yyj1])); yyxt3 != nil {
						z.DecExtension(yyv1[yyj1], yyxt3)
					} else {
						yyv1[yyj1] = (time.Duration)(r.DecodeInt64())
					}
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]time.Duration, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer9405) encSliceEce408Inference(v []Ece408Inference, e *codec1978.Encoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	r.WriteArrayEnd()
}

func (x codecSelfer9405) decSliceEce408Inference(v *[]Ece408Inference, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []Ece408Inference{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 72)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]Ece408Inference, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 72)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]Ece408Inference, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, Ece408Inference{})
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Ece408Inference{}
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]Ece408Inference, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer9405) encEce408JobResponses(v Ece408JobResponses, e *codec1978.Encoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	r.WriteArrayEnd()
}

func (x codecSelfer9405) decEce408JobResponses(v *Ece408JobResponses, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []Ece408JobResponse{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 120)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]Ece408JobResponse, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 120)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]Ece408JobResponse, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, Ece408JobResponse{})
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Ece408JobResponse{}
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]Ece408JobResponse, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer9405) encByMinOpRuntime(v ByMinOpRuntime, e *codec1978.Encoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	r.WriteArrayEnd()
}

func (x codecSelfer9405) decByMinOpRuntime(v *ByMinOpRuntime, d *codec1978.Decoder) {
	var h codecSelfer9405
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []Ece408JobResponse{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 120)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]Ece408JobResponse, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 120)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]Ece408JobResponse, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, Ece408JobResponse{})
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Ece408JobResponse{}
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]Ece408JobResponse, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}
