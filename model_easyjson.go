// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package  model

import (
  acl "github.com/rai-project/acl"
  config "github.com/rai-project/config"
  easyjson "github.com/mailru/easyjson"
  jlexer "github.com/mailru/easyjson/jlexer"
  json "encoding/json"
  jwriter "github.com/mailru/easyjson/jwriter"
  time "time"
)

// suppress unused package warning
var (
   _ *json.RawMessage
   _ *jlexer.Lexer
   _ *jwriter.Writer
   _ easyjson.Marshaler
)

func easyjsonC80ae7adDecodeGithubComRaiProjectModel(in *jlexer.Lexer, out *User) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "_id":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.ID).UnmarshalJSON(data) )
      }
    case "firstname":
      out.Firstname = string(in.String())
    case "lastname":
      out.Lastname = string(in.String())
    case "username":
      out.Username = string(in.String())
    case "email":
      out.Email = string(in.String())
    case "access_key":
      out.AccessKey = string(in.String())
    case "secret_key":
      out.SecretKey = string(in.String())
    case "affiliation":
      out.Affiliation = string(in.String())
    case "password":
      out.Password = string(in.String())
    case "team":
      if in.IsNull() {
        in.Skip()
        out.Team = nil
      } else {
        if out.Team == nil {
          out.Team = new(Team)
        }
        (*out.Team).UnmarshalEasyJSON(in)
      }
    case "dockerhub":
      if in.IsNull() {
        in.Skip()
        out.DockerHub = nil
      } else {
        if out.DockerHub == nil {
          out.DockerHub = new(DockerHubCredentials)
        }
        (*out.DockerHub).UnmarshalEasyJSON(in)
      }
    case "role":
      out.Role = acl.Role(in.String())
    case "created_at":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.CreatedAt).UnmarshalJSON(data) )
      }
    case "updated_at":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.UpdatedAt).UnmarshalJSON(data) )
      }
    case "deleted_at":
      if in.IsNull() {
        in.Skip()
        out.DeletedAt = nil
      } else {
        if out.DeletedAt == nil {
          out.DeletedAt = new(time.Time)
        }
        if data := in.Raw(); in.Ok() {
          in.AddError( (*out.DeletedAt).UnmarshalJSON(data) )
        }
      }
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonC80ae7adEncodeGithubComRaiProjectModel(out *jwriter.Writer, in User) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"_id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.ID).MarshalJSON() )
  }
  {
    const prefix string = ",\"firstname\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Firstname))
  }
  {
    const prefix string = ",\"lastname\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Lastname))
  }
  {
    const prefix string = ",\"username\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Username))
  }
  {
    const prefix string = ",\"email\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Email))
  }
  {
    const prefix string = ",\"access_key\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.AccessKey))
  }
  {
    const prefix string = ",\"secret_key\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.SecretKey))
  }
  {
    const prefix string = ",\"affiliation\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Affiliation))
  }
  {
    const prefix string = ",\"password\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Password))
  }
  {
    const prefix string = ",\"team\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    if in.Team == nil {
      out.RawString("null")
    } else {
      (*in.Team).MarshalEasyJSON(out)
    }
  }
  if in.DockerHub != nil {
    const prefix string = ",\"dockerhub\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
      (*in.DockerHub).MarshalEasyJSON(out)
  }
  {
    const prefix string = ",\"role\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Role))
  }
  {
    const prefix string = ",\"created_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.CreatedAt).MarshalJSON() )
  }
  {
    const prefix string = ",\"updated_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.UpdatedAt).MarshalJSON() )
  }
  {
    const prefix string = ",\"deleted_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    if in.DeletedAt == nil {
      out.RawString("null")
    } else {
      out.Raw( (*in.DeletedAt).MarshalJSON() )
    }
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonC80ae7adEncodeGithubComRaiProjectModel(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonC80ae7adEncodeGithubComRaiProjectModel(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonC80ae7adDecodeGithubComRaiProjectModel(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonC80ae7adDecodeGithubComRaiProjectModel(l, v)
}
func easyjsonC80ae7adDecodeGithubComRaiProjectModel1(in *jlexer.Lexer, out *Team) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "name":
      out.Name = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonC80ae7adEncodeGithubComRaiProjectModel1(out *jwriter.Writer, in Team) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Name))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v Team) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonC80ae7adEncodeGithubComRaiProjectModel1(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Team) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonC80ae7adEncodeGithubComRaiProjectModel1(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *Team) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonC80ae7adDecodeGithubComRaiProjectModel1(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Team) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonC80ae7adDecodeGithubComRaiProjectModel1(l, v)
}
func easyjsonC80ae7adDecodeGithubComRaiProjectModel2(in *jlexer.Lexer, out *Resources) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "cpu":
      (out.CPU).UnmarshalEasyJSON(in)
    case "gpu":
      if in.IsNull() {
        in.Skip()
        out.GPU = nil
      } else {
        if out.GPU == nil {
          out.GPU = new(GPUResources)
        }
        (*out.GPU).UnmarshalEasyJSON(in)
      }
    case "dataresources":
      if in.IsNull() {
        in.Skip()
        out.DataResources = nil
      } else {
        if out.DataResources == nil {
          out.DataResources = new(DataResources)
        }
        (*out.DataResources).UnmarshalEasyJSON(in)
      }
    case "limits":
      (out.Limits).UnmarshalEasyJSON(in)
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonC80ae7adEncodeGithubComRaiProjectModel2(out *jwriter.Writer, in Resources) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"cpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    (in.CPU).MarshalEasyJSON(out)
  }
  if in.GPU != nil {
    const prefix string = ",\"gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
      (*in.GPU).MarshalEasyJSON(out)
  }
  if in.DataResources != nil {
    const prefix string = ",\"dataresources\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
      (*in.DataResources).MarshalEasyJSON(out)
  }
  {
    const prefix string = ",\"limits\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    (in.Limits).MarshalEasyJSON(out)
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v Resources) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonC80ae7adEncodeGithubComRaiProjectModel2(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Resources) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonC80ae7adEncodeGithubComRaiProjectModel2(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *Resources) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonC80ae7adDecodeGithubComRaiProjectModel2(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Resources) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonC80ae7adDecodeGithubComRaiProjectModel2(l, v)
}
func easyjsonC80ae7adDecodeGithubComRaiProjectModel3(in *jlexer.Lexer, out *RAIBuildSpecification) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "version":
      out.Version = string(in.String())
    case "image":
      out.ContainerImage = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonC80ae7adEncodeGithubComRaiProjectModel3(out *jwriter.Writer, in RAIBuildSpecification) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"version\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Version))
  }
  {
    const prefix string = ",\"image\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ContainerImage))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v RAIBuildSpecification) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonC80ae7adEncodeGithubComRaiProjectModel3(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RAIBuildSpecification) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonC80ae7adEncodeGithubComRaiProjectModel3(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *RAIBuildSpecification) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonC80ae7adDecodeGithubComRaiProjectModel3(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RAIBuildSpecification) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonC80ae7adDecodeGithubComRaiProjectModel3(l, v)
}
func easyjsonC80ae7adDecodeGithubComRaiProjectModel4(in *jlexer.Lexer, out *Push) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "push":
      out.Push = bool(in.Bool())
    case "image_name":
      out.ImageName = string(in.String())
    case "registry":
      out.Registry = string(in.String())
    case "credentials":
      (out.Credentials).UnmarshalEasyJSON(in)
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonC80ae7adEncodeGithubComRaiProjectModel4(out *jwriter.Writer, in Push) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"push\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.Push))
  }
  {
    const prefix string = ",\"image_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ImageName))
  }
  {
    const prefix string = ",\"registry\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Registry))
  }
  {
    const prefix string = ",\"credentials\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    (in.Credentials).MarshalEasyJSON(out)
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v Push) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonC80ae7adEncodeGithubComRaiProjectModel4(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Push) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonC80ae7adEncodeGithubComRaiProjectModel4(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *Push) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonC80ae7adDecodeGithubComRaiProjectModel4(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Push) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonC80ae7adDecodeGithubComRaiProjectModel4(l, v)
}
func easyjsonC80ae7adDecodeGithubComRaiProjectModel5(in *jlexer.Lexer, out *MountResource) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "mount":
      out.Mount = string(in.String())
    case "source":
      easyjsonC80ae7adDecodeGithubComRaiProjectModel6(in, &out.Source)
    case "cache":
      out.Cache = bool(in.Bool())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonC80ae7adEncodeGithubComRaiProjectModel5(out *jwriter.Writer, in MountResource) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"mount\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Mount))
  }
  {
    const prefix string = ",\"source\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    easyjsonC80ae7adEncodeGithubComRaiProjectModel6(out, in.Source)
  }
  {
    const prefix string = ",\"cache\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.Cache))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v MountResource) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonC80ae7adEncodeGithubComRaiProjectModel5(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MountResource) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonC80ae7adEncodeGithubComRaiProjectModel5(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *MountResource) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonC80ae7adDecodeGithubComRaiProjectModel5(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MountResource) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonC80ae7adDecodeGithubComRaiProjectModel5(l, v)
}
func easyjsonC80ae7adDecodeGithubComRaiProjectModel6(in *jlexer.Lexer, out *MountSource) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "url":
      out.URL = string(in.String())
    case "extract":
      out.Extract = bool(in.Bool())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonC80ae7adEncodeGithubComRaiProjectModel6(out *jwriter.Writer, in MountSource) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"url\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.URL))
  }
  {
    const prefix string = ",\"extract\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.Extract))
  }
  out.RawByte('}')
}
func easyjsonC80ae7adDecodeGithubComRaiProjectModel7(in *jlexer.Lexer, out *Limits) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "network":
      out.Network = bool(in.Bool())
    case "time":
      out.Time = time.Duration(in.Int64())
    case "datasize":
      out.DataSize = uint64(in.Uint64())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonC80ae7adEncodeGithubComRaiProjectModel7(out *jwriter.Writer, in Limits) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"network\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.Network))
  }
  {
    const prefix string = ",\"time\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int64(int64(in.Time))
  }
  {
    const prefix string = ",\"datasize\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Uint64(uint64(in.DataSize))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v Limits) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonC80ae7adEncodeGithubComRaiProjectModel7(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Limits) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonC80ae7adEncodeGithubComRaiProjectModel7(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *Limits) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonC80ae7adDecodeGithubComRaiProjectModel7(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Limits) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonC80ae7adDecodeGithubComRaiProjectModel7(l, v)
}
func easyjsonC80ae7adDecodeGithubComRaiProjectModel8(in *jlexer.Lexer, out *JobResponse) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "id":
      out.ID = string(in.String())
    case "kind":
      out.Kind = ResponseKind(in.String())
    case "error":
      if in.IsNull() {
        in.Skip()
        out.Error = nil
      } else {
        if out.Error == nil {
          out.Error = new(Error)
        }
        easyjsonC80ae7adDecodeGithubComRaiProjectModel9(in, &*out.Error)
      }
    case "body":
      if in.IsNull() {
        in.Skip()
        out.Body = nil
      } else {
        out.Body = in.Bytes()
      }
    case "metadata":
      if in.IsNull() {
        in.Skip()
      } else {
        in.Delim('{')
        if !in.IsDelim('}') {
        out.Metadata = make(map[string]interface {})
        } else {
        out.Metadata = nil
        }
        for !in.IsDelim('}') {
          key := string(in.String())
          in.WantColon()
          var v2 interface {}
          if m, ok := v2.(easyjson.Unmarshaler); ok {
          m.UnmarshalEasyJSON(in)
          } else if m, ok := v2.(json.Unmarshaler); ok {
          _ = m.UnmarshalJSON(in.Raw())
          } else {
            v2 = in.Interface()
          }
          (out.Metadata)[key] = v2
          in.WantComma()
        }
        in.Delim('}')
      }
    case "created_at":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.CreatedAt).UnmarshalJSON(data) )
      }
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonC80ae7adEncodeGithubComRaiProjectModel8(out *jwriter.Writer, in JobResponse) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ID))
  }
  {
    const prefix string = ",\"kind\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Kind))
  }
  {
    const prefix string = ",\"error\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    if in.Error == nil {
      out.RawString("null")
    } else {
      out.Raw( (*in.Error).MarshalJSON() )
    }
  }
  {
    const prefix string = ",\"body\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Base64Bytes(in.Body)
  }
  if len(in.Metadata) != 0 {
    const prefix string = ",\"metadata\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    {
      out.RawByte('{')
      v5First := true
      for v5Name, v5Value := range in.Metadata {
        if v5First { v5First = false } else { out.RawByte(',') }
        out.String(string(v5Name))
        out.RawByte(':')
        if m, ok := v5Value.(easyjson.Marshaler); ok {
          m.MarshalEasyJSON(out)
        } else if m, ok := v5Value.(json.Marshaler); ok {
          out.Raw(m.MarshalJSON())
        } else {
          out.Raw(json.Marshal(v5Value))
        }
      }
      out.RawByte('}')
    }
  }
  {
    const prefix string = ",\"created_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.CreatedAt).MarshalJSON() )
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v JobResponse) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonC80ae7adEncodeGithubComRaiProjectModel8(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JobResponse) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonC80ae7adEncodeGithubComRaiProjectModel8(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *JobResponse) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonC80ae7adDecodeGithubComRaiProjectModel8(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JobResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonC80ae7adDecodeGithubComRaiProjectModel8(l, v)
}
func easyjsonC80ae7adDecodeGithubComRaiProjectModel9(in *jlexer.Lexer, out *Error) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonC80ae7adEncodeGithubComRaiProjectModel9(out *jwriter.Writer, in Error) {
  out.RawByte('{')
  first := true
  _ = first
  out.RawByte('}')
}
func easyjsonC80ae7adDecodeGithubComRaiProjectModel10(in *jlexer.Lexer, out *JobRequest) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "_id":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.ID).UnmarshalJSON(data) )
      }
    case "client_version":
      easyjsonC80ae7adDecodeGithubComRaiProjectConfig(in, &out.ClientVersion)
    case "upload_key":
      out.UploadKey = string(in.String())
    case "user":
      (out.User).UnmarshalEasyJSON(in)
    case "build_specification":
      (out.BuildSpecification).UnmarshalEasyJSON(in)
    case "created_at":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.CreatedAt).UnmarshalJSON(data) )
      }
    case "updated_at":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.UpdatedAt).UnmarshalJSON(data) )
      }
    case "deleted_at":
      if in.IsNull() {
        in.Skip()
        out.DeletedAt = nil
      } else {
        if out.DeletedAt == nil {
          out.DeletedAt = new(time.Time)
        }
        if data := in.Raw(); in.Ok() {
          in.AddError( (*out.DeletedAt).UnmarshalJSON(data) )
        }
      }
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonC80ae7adEncodeGithubComRaiProjectModel10(out *jwriter.Writer, in JobRequest) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"_id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.ID).MarshalJSON() )
  }
  {
    const prefix string = ",\"client_version\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    easyjsonC80ae7adEncodeGithubComRaiProjectConfig(out, in.ClientVersion)
  }
  {
    const prefix string = ",\"upload_key\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.UploadKey))
  }
  {
    const prefix string = ",\"user\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    (in.User).MarshalEasyJSON(out)
  }
  {
    const prefix string = ",\"build_specification\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    (in.BuildSpecification).MarshalEasyJSON(out)
  }
  {
    const prefix string = ",\"created_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.CreatedAt).MarshalJSON() )
  }
  {
    const prefix string = ",\"updated_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.UpdatedAt).MarshalJSON() )
  }
  {
    const prefix string = ",\"deleted_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    if in.DeletedAt == nil {
      out.RawString("null")
    } else {
      out.Raw( (*in.DeletedAt).MarshalJSON() )
    }
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v JobRequest) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonC80ae7adEncodeGithubComRaiProjectModel10(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JobRequest) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonC80ae7adEncodeGithubComRaiProjectModel10(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *JobRequest) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonC80ae7adDecodeGithubComRaiProjectModel10(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JobRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonC80ae7adDecodeGithubComRaiProjectModel10(l, v)
}
func easyjsonC80ae7adDecodeGithubComRaiProjectConfig(in *jlexer.Lexer, out *config.VersionInfo) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "version":
      out.Version = string(in.String())
    case "build_date":
      out.BuildDate = string(in.String())
    case "git_commit":
      out.GitCommit = string(in.String())
    case "git_branch":
      out.GitBranch = string(in.String())
    case "git_state":
      out.GitState = string(in.String())
    case "git_summary":
      out.GitSummary = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonC80ae7adEncodeGithubComRaiProjectConfig(out *jwriter.Writer, in config.VersionInfo) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"version\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Version))
  }
  {
    const prefix string = ",\"build_date\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.BuildDate))
  }
  {
    const prefix string = ",\"git_commit\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.GitCommit))
  }
  {
    const prefix string = ",\"git_branch\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.GitBranch))
  }
  {
    const prefix string = ",\"git_state\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.GitState))
  }
  {
    const prefix string = ",\"git_summary\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.GitSummary))
  }
  out.RawByte('}')
}
func easyjsonC80ae7adDecodeGithubComRaiProjectModel11(in *jlexer.Lexer, out *GPUResources) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "architecture":
      out.Architecture = string(in.String())
    case "count":
      out.Count = int(in.Int())
    case "memory":
      out.Memory = int64(in.Int64())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonC80ae7adEncodeGithubComRaiProjectModel11(out *jwriter.Writer, in GPUResources) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"architecture\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Architecture))
  }
  {
    const prefix string = ",\"count\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int(int(in.Count))
  }
  {
    const prefix string = ",\"memory\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Int64(int64(in.Memory))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v GPUResources) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonC80ae7adEncodeGithubComRaiProjectModel11(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GPUResources) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonC80ae7adEncodeGithubComRaiProjectModel11(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *GPUResources) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonC80ae7adDecodeGithubComRaiProjectModel11(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GPUResources) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonC80ae7adDecodeGithubComRaiProjectModel11(l, v)
}
func easyjsonC80ae7adDecodeGithubComRaiProjectModel12(in *jlexer.Lexer, out *DockerHubCredentials) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "username":
      out.Username = string(in.String())
    case "password":
      out.Password = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonC80ae7adEncodeGithubComRaiProjectModel12(out *jwriter.Writer, in DockerHubCredentials) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"username\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Username))
  }
  {
    const prefix string = ",\"password\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Password))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v DockerHubCredentials) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonC80ae7adEncodeGithubComRaiProjectModel12(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DockerHubCredentials) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonC80ae7adEncodeGithubComRaiProjectModel12(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *DockerHubCredentials) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonC80ae7adDecodeGithubComRaiProjectModel12(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DockerHubCredentials) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonC80ae7adDecodeGithubComRaiProjectModel12(l, v)
}
func easyjsonC80ae7adDecodeGithubComRaiProjectModel13(in *jlexer.Lexer, out *DataResources) {
 isTopLevel := in.IsStart()
  if in.IsNull() {
    in.Skip()
    *out = nil
  } else {
    in.Delim('[')
    if *out == nil {
      if !in.IsDelim(']') {
        *out = make(DataResources, 0, 1)
      } else {
        *out = DataResources{}
      }
    } else { 
      *out = (*out)[:0]
    }
    for !in.IsDelim(']') {
      var v6 MountResource
      (v6).UnmarshalEasyJSON(in)
      *out = append(*out, v6)
      in.WantComma()
    }
    in.Delim(']')
  }
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonC80ae7adEncodeGithubComRaiProjectModel13(out *jwriter.Writer, in DataResources) {
  if in == nil && (out.Flags & jwriter.NilSliceAsEmpty) == 0 {
    out.RawString("null")
  } else {
    out.RawByte('[')
    for v7, v8 := range in {
      if v7 > 0 {
        out.RawByte(',')
      }
      (v8).MarshalEasyJSON(out)
    }
    out.RawByte(']')
  }
}
// MarshalJSON supports json.Marshaler interface
func (v DataResources) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonC80ae7adEncodeGithubComRaiProjectModel13(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataResources) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonC80ae7adEncodeGithubComRaiProjectModel13(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataResources) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonC80ae7adDecodeGithubComRaiProjectModel13(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataResources) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonC80ae7adDecodeGithubComRaiProjectModel13(l, v)
}
func easyjsonC80ae7adDecodeGithubComRaiProjectModel14(in *jlexer.Lexer, out *CommandsBuildSpecification) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "build_image":
      if in.IsNull() {
        in.Skip()
        out.BuildImage = nil
      } else {
        if out.BuildImage == nil {
          out.BuildImage = new(BuildImageSpecification)
        }
        (*out.BuildImage).UnmarshalEasyJSON(in)
      }
    case "build":
      (out.Build).UnmarshalEasyJSON(in)
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonC80ae7adEncodeGithubComRaiProjectModel14(out *jwriter.Writer, in CommandsBuildSpecification) {
  out.RawByte('{')
  first := true
  _ = first
  if in.BuildImage != nil {
    const prefix string = ",\"build_image\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
      (*in.BuildImage).MarshalEasyJSON(out)
  }
  {
    const prefix string = ",\"build\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    (in.Build).MarshalEasyJSON(out)
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v CommandsBuildSpecification) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonC80ae7adEncodeGithubComRaiProjectModel14(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommandsBuildSpecification) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonC80ae7adEncodeGithubComRaiProjectModel14(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommandsBuildSpecification) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonC80ae7adDecodeGithubComRaiProjectModel14(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommandsBuildSpecification) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonC80ae7adDecodeGithubComRaiProjectModel14(l, v)
}
func easyjsonC80ae7adDecodeGithubComRaiProjectModel15(in *jlexer.Lexer, out *CPUResources) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "architecture":
      out.Architecture = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonC80ae7adEncodeGithubComRaiProjectModel15(out *jwriter.Writer, in CPUResources) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"architecture\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Architecture))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v CPUResources) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonC80ae7adEncodeGithubComRaiProjectModel15(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CPUResources) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonC80ae7adEncodeGithubComRaiProjectModel15(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *CPUResources) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonC80ae7adDecodeGithubComRaiProjectModel15(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CPUResources) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonC80ae7adDecodeGithubComRaiProjectModel15(l, v)
}
func easyjsonC80ae7adDecodeGithubComRaiProjectModel16(in *jlexer.Lexer, out *BuildSpecification) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "rai":
      (out.RAI).UnmarshalEasyJSON(in)
    case "resources":
      (out.Resources).UnmarshalEasyJSON(in)
    case "commands":
      (out.Commands).UnmarshalEasyJSON(in)
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonC80ae7adEncodeGithubComRaiProjectModel16(out *jwriter.Writer, in BuildSpecification) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"rai\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    (in.RAI).MarshalEasyJSON(out)
  }
  {
    const prefix string = ",\"resources\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    (in.Resources).MarshalEasyJSON(out)
  }
  {
    const prefix string = ",\"commands\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    (in.Commands).MarshalEasyJSON(out)
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v BuildSpecification) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonC80ae7adEncodeGithubComRaiProjectModel16(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BuildSpecification) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonC80ae7adEncodeGithubComRaiProjectModel16(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *BuildSpecification) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonC80ae7adDecodeGithubComRaiProjectModel16(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BuildSpecification) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonC80ae7adDecodeGithubComRaiProjectModel16(l, v)
}
func easyjsonC80ae7adDecodeGithubComRaiProjectModel17(in *jlexer.Lexer, out *BuildImageSpecification) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "image_name":
      out.ImageName = string(in.String())
    case "dockerfile":
      out.Dockerfile = string(in.String())
    case "push":
      if in.IsNull() {
        in.Skip()
        out.Push = nil
      } else {
        if out.Push == nil {
          out.Push = new(Push)
        }
        (*out.Push).UnmarshalEasyJSON(in)
      }
    case "no_cache":
      out.NoCache = bool(in.Bool())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonC80ae7adEncodeGithubComRaiProjectModel17(out *jwriter.Writer, in BuildImageSpecification) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"image_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ImageName))
  }
  {
    const prefix string = ",\"dockerfile\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Dockerfile))
  }
  {
    const prefix string = ",\"push\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    if in.Push == nil {
      out.RawString("null")
    } else {
      (*in.Push).MarshalEasyJSON(out)
    }
  }
  {
    const prefix string = ",\"no_cache\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Bool(bool(in.NoCache))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v BuildImageSpecification) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonC80ae7adEncodeGithubComRaiProjectModel17(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BuildImageSpecification) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonC80ae7adEncodeGithubComRaiProjectModel17(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *BuildImageSpecification) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonC80ae7adDecodeGithubComRaiProjectModel17(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BuildImageSpecification) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonC80ae7adDecodeGithubComRaiProjectModel17(l, v)
}
func easyjsonC80ae7adDecodeGithubComRaiProjectModel18(in *jlexer.Lexer, out *BuildCommands) {
 isTopLevel := in.IsStart()
  if in.IsNull() {
    in.Skip()
    *out = nil
  } else {
    in.Delim('[')
    if *out == nil {
      if !in.IsDelim(']') {
        *out = make(BuildCommands, 0, 4)
      } else {
        *out = BuildCommands{}
      }
    } else { 
      *out = (*out)[:0]
    }
    for !in.IsDelim(']') {
      var v9 string
      v9 = string(in.String())
      *out = append(*out, v9)
      in.WantComma()
    }
    in.Delim(']')
  }
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonC80ae7adEncodeGithubComRaiProjectModel18(out *jwriter.Writer, in BuildCommands) {
  if in == nil && (out.Flags & jwriter.NilSliceAsEmpty) == 0 {
    out.RawString("null")
  } else {
    out.RawByte('[')
    for v10, v11 := range in {
      if v10 > 0 {
        out.RawByte(',')
      }
      out.String(string(v11))
    }
    out.RawByte(']')
  }
}
// MarshalJSON supports json.Marshaler interface
func (v BuildCommands) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonC80ae7adEncodeGithubComRaiProjectModel18(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BuildCommands) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonC80ae7adEncodeGithubComRaiProjectModel18(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *BuildCommands) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonC80ae7adDecodeGithubComRaiProjectModel18(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BuildCommands) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonC80ae7adDecodeGithubComRaiProjectModel18(l, v)
}
func easyjsonC80ae7adDecodeGithubComRaiProjectModel19(in *jlexer.Lexer, out *Base) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "created_at":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.CreatedAt).UnmarshalJSON(data) )
      }
    case "updated_at":
      if data := in.Raw(); in.Ok() {
        in.AddError( (out.UpdatedAt).UnmarshalJSON(data) )
      }
    case "deleted_at":
      if in.IsNull() {
        in.Skip()
        out.DeletedAt = nil
      } else {
        if out.DeletedAt == nil {
          out.DeletedAt = new(time.Time)
        }
        if data := in.Raw(); in.Ok() {
          in.AddError( (*out.DeletedAt).UnmarshalJSON(data) )
        }
      }
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonC80ae7adEncodeGithubComRaiProjectModel19(out *jwriter.Writer, in Base) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"created_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.CreatedAt).MarshalJSON() )
  }
  {
    const prefix string = ",\"updated_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.Raw( (in.UpdatedAt).MarshalJSON() )
  }
  {
    const prefix string = ",\"deleted_at\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    if in.DeletedAt == nil {
      out.RawString("null")
    } else {
      out.Raw( (*in.DeletedAt).MarshalJSON() )
    }
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v Base) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonC80ae7adEncodeGithubComRaiProjectModel19(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Base) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonC80ae7adEncodeGithubComRaiProjectModel19(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *Base) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonC80ae7adDecodeGithubComRaiProjectModel19(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Base) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonC80ae7adDecodeGithubComRaiProjectModel19(l, v)
}
