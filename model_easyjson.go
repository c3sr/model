// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	acl "github.com/c3sr/acl"
	config "github.com/c3sr/config"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC80ae7adDecodeGithubComC3srModel(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "firstname":
			out.Firstname = string(in.String())
		case "lastname":
			out.Lastname = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "access_key":
			out.AccessKey = string(in.String())
		case "secret_key":
			out.SecretKey = string(in.String())
		case "affiliation":
			out.Affiliation = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "team":
			if in.IsNull() {
				in.Skip()
				out.Team = nil
			} else {
				if out.Team == nil {
					out.Team = new(Team)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Team).UnmarshalJSON(data))
				}
			}
		case "dockerhub":
			if in.IsNull() {
				in.Skip()
				out.DockerHub = nil
			} else {
				if out.DockerHub == nil {
					out.DockerHub = new(DockerHubCredentials)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DockerHub).UnmarshalJSON(data))
				}
			}
		case "role":
			out.Role = acl.Role(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "deleted_at":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComC3srModel(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_id\":"
		out.RawString(prefix[1:])
		out.Raw((in.ID).MarshalJSON())
	}
	{
		const prefix string = ",\"firstname\":"
		out.RawString(prefix)
		out.String(string(in.Firstname))
	}
	{
		const prefix string = ",\"lastname\":"
		out.RawString(prefix)
		out.String(string(in.Lastname))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"access_key\":"
		out.RawString(prefix)
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"secret_key\":"
		out.RawString(prefix)
		out.String(string(in.SecretKey))
	}
	{
		const prefix string = ",\"affiliation\":"
		out.RawString(prefix)
		out.String(string(in.Affiliation))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"team\":"
		out.RawString(prefix)
		if in.Team == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Team).MarshalJSON())
		}
	}
	if in.DockerHub != nil {
		const prefix string = ",\"dockerhub\":"
		out.RawString(prefix)
		out.Raw((*in.DockerHub).MarshalJSON())
	}
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Role))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"deleted_at\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComC3srModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComC3srModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComC3srModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComC3srModel(l, v)
}
func easyjsonC80ae7adDecodeGithubComC3srModel1(in *jlexer.Lexer, out *Team) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComC3srModel1(out *jwriter.Writer, in Team) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Team) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComC3srModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Team) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComC3srModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Team) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComC3srModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Team) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComC3srModel1(l, v)
}
func easyjsonC80ae7adDecodeGithubComC3srModel2(in *jlexer.Lexer, out *Resources) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cpu":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CPU).UnmarshalJSON(data))
			}
		case "gpu":
			if in.IsNull() {
				in.Skip()
				out.GPU = nil
			} else {
				if out.GPU == nil {
					out.GPU = new(GPUResources)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.GPU).UnmarshalJSON(data))
				}
			}
		case "dataresources":
			if in.IsNull() {
				in.Skip()
				out.DataResources = nil
			} else {
				if out.DataResources == nil {
					out.DataResources = new(DataResources)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DataResources).UnmarshalJSON(data))
				}
			}
		case "limits":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Limits).UnmarshalJSON(data))
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComC3srModel2(out *jwriter.Writer, in Resources) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cpu\":"
		out.RawString(prefix[1:])
		out.Raw((in.CPU).MarshalJSON())
	}
	if in.GPU != nil {
		const prefix string = ",\"gpu\":"
		out.RawString(prefix)
		out.Raw((*in.GPU).MarshalJSON())
	}
	if in.DataResources != nil {
		const prefix string = ",\"dataresources\":"
		out.RawString(prefix)
		out.Raw((*in.DataResources).MarshalJSON())
	}
	{
		const prefix string = ",\"limits\":"
		out.RawString(prefix)
		out.Raw((in.Limits).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Resources) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComC3srModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Resources) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComC3srModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Resources) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComC3srModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Resources) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComC3srModel2(l, v)
}
func easyjsonC80ae7adDecodeGithubComC3srModel3(in *jlexer.Lexer, out *RAIBuildSpecification) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "version":
			out.Version = string(in.String())
		case "image":
			out.ContainerImage = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComC3srModel3(out *jwriter.Writer, in RAIBuildSpecification) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix[1:])
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.ContainerImage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RAIBuildSpecification) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComC3srModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RAIBuildSpecification) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComC3srModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RAIBuildSpecification) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComC3srModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RAIBuildSpecification) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComC3srModel3(l, v)
}
func easyjsonC80ae7adDecodeGithubComC3srModel4(in *jlexer.Lexer, out *Push) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "push":
			out.Push = bool(in.Bool())
		case "image_name":
			out.ImageName = string(in.String())
		case "registry":
			out.Registry = string(in.String())
		case "credentials":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Credentials).UnmarshalJSON(data))
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComC3srModel4(out *jwriter.Writer, in Push) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"push\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Push))
	}
	{
		const prefix string = ",\"image_name\":"
		out.RawString(prefix)
		out.String(string(in.ImageName))
	}
	{
		const prefix string = ",\"registry\":"
		out.RawString(prefix)
		out.String(string(in.Registry))
	}
	{
		const prefix string = ",\"credentials\":"
		out.RawString(prefix)
		out.Raw((in.Credentials).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Push) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComC3srModel4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Push) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComC3srModel4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Push) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComC3srModel4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Push) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComC3srModel4(l, v)
}
func easyjsonC80ae7adDecodeGithubComC3srModel5(in *jlexer.Lexer, out *MountResource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mount":
			out.Mount = string(in.String())
		case "source":
			easyjsonC80ae7adDecodeGithubComC3srModel6(in, &out.Source)
		case "cache":
			out.Cache = bool(in.Bool())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComC3srModel5(out *jwriter.Writer, in MountResource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mount\":"
		out.RawString(prefix[1:])
		out.String(string(in.Mount))
	}
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		easyjsonC80ae7adEncodeGithubComC3srModel6(out, in.Source)
	}
	{
		const prefix string = ",\"cache\":"
		out.RawString(prefix)
		out.Bool(bool(in.Cache))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MountResource) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComC3srModel5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MountResource) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComC3srModel5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MountResource) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComC3srModel5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MountResource) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComC3srModel5(l, v)
}
func easyjsonC80ae7adDecodeGithubComC3srModel6(in *jlexer.Lexer, out *MountSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "extract":
			out.Extract = bool(in.Bool())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComC3srModel6(out *jwriter.Writer, in MountSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"extract\":"
		out.RawString(prefix)
		out.Bool(bool(in.Extract))
	}
	out.RawByte('}')
}
func easyjsonC80ae7adDecodeGithubComC3srModel7(in *jlexer.Lexer, out *Limits) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "network":
			out.Network = bool(in.Bool())
		case "time":
			out.Time = time.Duration(in.Int64())
		case "datasize":
			out.DataSize = uint64(in.Uint64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComC3srModel7(out *jwriter.Writer, in Limits) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"network\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Network))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"datasize\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.DataSize))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Limits) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComC3srModel7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Limits) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComC3srModel7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Limits) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComC3srModel7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Limits) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComC3srModel7(l, v)
}
func easyjsonC80ae7adDecodeGithubComC3srModel8(in *jlexer.Lexer, out *JobResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "kind":
			out.Kind = ResponseKind(in.String())
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(Error)
				}
				easyjsonC80ae7adDecodeGithubComC3srModel9(in, out.Error)
			}
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				out.Body = in.Bytes()
			}
		case "metadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Metadata = make(map[string]interface{})
				} else {
					out.Metadata = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 interface{}
					if m, ok := v2.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v2.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v2 = in.Interface()
					}
					(out.Metadata)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComC3srModel8(out *jwriter.Writer, in JobResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		out.String(string(in.Kind))
	}
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		if in.Error == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Error).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Body)
	}
	if len(in.Metadata) != 0 {
		const prefix string = ",\"metadata\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.Metadata {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				if m, ok := v5Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v5Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v5Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v JobResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComC3srModel8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JobResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComC3srModel8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JobResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComC3srModel8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JobResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComC3srModel8(l, v)
}
func easyjsonC80ae7adDecodeGithubComC3srModel9(in *jlexer.Lexer, out *Error) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComC3srModel9(out *jwriter.Writer, in Error) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjsonC80ae7adDecodeGithubComC3srModel10(in *jlexer.Lexer, out *JobRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "client_version":
			easyjsonC80ae7adDecodeGithubComC3srModelVendorGithubComC3srConfig(in, &out.ClientVersion)
		case "upload_key":
			out.UploadKey = string(in.String())
		case "user":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.User).UnmarshalJSON(data))
			}
		case "build_specification":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.BuildSpecification).UnmarshalJSON(data))
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "deleted_at":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComC3srModel10(out *jwriter.Writer, in JobRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_id\":"
		out.RawString(prefix[1:])
		out.Raw((in.ID).MarshalJSON())
	}
	{
		const prefix string = ",\"client_version\":"
		out.RawString(prefix)
		easyjsonC80ae7adEncodeGithubComC3srModelVendorGithubComC3srConfig(out, in.ClientVersion)
	}
	{
		const prefix string = ",\"upload_key\":"
		out.RawString(prefix)
		out.String(string(in.UploadKey))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.Raw((in.User).MarshalJSON())
	}
	{
		const prefix string = ",\"build_specification\":"
		out.RawString(prefix)
		out.Raw((in.BuildSpecification).MarshalJSON())
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"deleted_at\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v JobRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComC3srModel10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JobRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComC3srModel10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JobRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComC3srModel10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JobRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComC3srModel10(l, v)
}
func easyjsonC80ae7adDecodeGithubComC3srModelVendorGithubComC3srConfig(in *jlexer.Lexer, out *config.VersionInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "version":
			out.Version = string(in.String())
		case "build_date":
			out.BuildDate = string(in.String())
		case "git_commit":
			out.GitCommit = string(in.String())
		case "git_branch":
			out.GitBranch = string(in.String())
		case "git_state":
			out.GitState = string(in.String())
		case "git_summary":
			out.GitSummary = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComC3srModelVendorGithubComC3srConfig(out *jwriter.Writer, in config.VersionInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix[1:])
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"build_date\":"
		out.RawString(prefix)
		out.String(string(in.BuildDate))
	}
	{
		const prefix string = ",\"git_commit\":"
		out.RawString(prefix)
		out.String(string(in.GitCommit))
	}
	{
		const prefix string = ",\"git_branch\":"
		out.RawString(prefix)
		out.String(string(in.GitBranch))
	}
	{
		const prefix string = ",\"git_state\":"
		out.RawString(prefix)
		out.String(string(in.GitState))
	}
	{
		const prefix string = ",\"git_summary\":"
		out.RawString(prefix)
		out.String(string(in.GitSummary))
	}
	out.RawByte('}')
}
func easyjsonC80ae7adDecodeGithubComC3srModel11(in *jlexer.Lexer, out *GPUResources) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "architecture":
			out.Architecture = string(in.String())
		case "count":
			out.Count = int(in.Int())
		case "memory":
			out.Memory = int64(in.Int64())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComC3srModel11(out *jwriter.Writer, in GPUResources) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"architecture\":"
		out.RawString(prefix[1:])
		out.String(string(in.Architecture))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"memory\":"
		out.RawString(prefix)
		out.Int64(int64(in.Memory))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GPUResources) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComC3srModel11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GPUResources) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComC3srModel11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GPUResources) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComC3srModel11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GPUResources) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComC3srModel11(l, v)
}
func easyjsonC80ae7adDecodeGithubComC3srModel12(in *jlexer.Lexer, out *DockerHubCredentials) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.Username = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComC3srModel12(out *jwriter.Writer, in DockerHubCredentials) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DockerHubCredentials) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComC3srModel12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DockerHubCredentials) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComC3srModel12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DockerHubCredentials) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComC3srModel12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DockerHubCredentials) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComC3srModel12(l, v)
}
func easyjsonC80ae7adDecodeGithubComC3srModel13(in *jlexer.Lexer, out *DataResources) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(DataResources, 0, 1)
			} else {
				*out = DataResources{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v6 MountResource
			if data := in.Raw(); in.Ok() {
				in.AddError((v6).UnmarshalJSON(data))
			}
			*out = append(*out, v6)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComC3srModel13(out *jwriter.Writer, in DataResources) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v7, v8 := range in {
			if v7 > 0 {
				out.RawByte(',')
			}
			out.Raw((v8).MarshalJSON())
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v DataResources) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComC3srModel13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataResources) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComC3srModel13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataResources) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComC3srModel13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataResources) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComC3srModel13(l, v)
}
func easyjsonC80ae7adDecodeGithubComC3srModel14(in *jlexer.Lexer, out *CommandsBuildSpecification) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "build_image":
			if in.IsNull() {
				in.Skip()
				out.BuildImage = nil
			} else {
				if out.BuildImage == nil {
					out.BuildImage = new(BuildImageSpecification)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.BuildImage).UnmarshalJSON(data))
				}
			}
		case "build":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Build).UnmarshalJSON(data))
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComC3srModel14(out *jwriter.Writer, in CommandsBuildSpecification) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BuildImage != nil {
		const prefix string = ",\"build_image\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((*in.BuildImage).MarshalJSON())
	}
	{
		const prefix string = ",\"build\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Build).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommandsBuildSpecification) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComC3srModel14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommandsBuildSpecification) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComC3srModel14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommandsBuildSpecification) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComC3srModel14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommandsBuildSpecification) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComC3srModel14(l, v)
}
func easyjsonC80ae7adDecodeGithubComC3srModel15(in *jlexer.Lexer, out *CPUResources) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "architecture":
			out.Architecture = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComC3srModel15(out *jwriter.Writer, in CPUResources) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"architecture\":"
		out.RawString(prefix[1:])
		out.String(string(in.Architecture))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CPUResources) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComC3srModel15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CPUResources) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComC3srModel15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CPUResources) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComC3srModel15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CPUResources) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComC3srModel15(l, v)
}
func easyjsonC80ae7adDecodeGithubComC3srModel16(in *jlexer.Lexer, out *BuildSpecification) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rai":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.RAI).UnmarshalJSON(data))
			}
		case "resources":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Resources).UnmarshalJSON(data))
			}
		case "commands":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Commands).UnmarshalJSON(data))
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComC3srModel16(out *jwriter.Writer, in BuildSpecification) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rai\":"
		out.RawString(prefix[1:])
		out.Raw((in.RAI).MarshalJSON())
	}
	{
		const prefix string = ",\"resources\":"
		out.RawString(prefix)
		out.Raw((in.Resources).MarshalJSON())
	}
	{
		const prefix string = ",\"commands\":"
		out.RawString(prefix)
		out.Raw((in.Commands).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BuildSpecification) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComC3srModel16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BuildSpecification) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComC3srModel16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BuildSpecification) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComC3srModel16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BuildSpecification) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComC3srModel16(l, v)
}
func easyjsonC80ae7adDecodeGithubComC3srModel17(in *jlexer.Lexer, out *BuildImageSpecification) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "image_name":
			out.ImageName = string(in.String())
		case "dockerfile":
			out.Dockerfile = string(in.String())
		case "push":
			if in.IsNull() {
				in.Skip()
				out.Push = nil
			} else {
				if out.Push == nil {
					out.Push = new(Push)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Push).UnmarshalJSON(data))
				}
			}
		case "no_cache":
			out.NoCache = bool(in.Bool())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComC3srModel17(out *jwriter.Writer, in BuildImageSpecification) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"image_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.ImageName))
	}
	{
		const prefix string = ",\"dockerfile\":"
		out.RawString(prefix)
		out.String(string(in.Dockerfile))
	}
	{
		const prefix string = ",\"push\":"
		out.RawString(prefix)
		if in.Push == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Push).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"no_cache\":"
		out.RawString(prefix)
		out.Bool(bool(in.NoCache))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BuildImageSpecification) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComC3srModel17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BuildImageSpecification) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComC3srModel17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BuildImageSpecification) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComC3srModel17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BuildImageSpecification) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComC3srModel17(l, v)
}
func easyjsonC80ae7adDecodeGithubComC3srModel18(in *jlexer.Lexer, out *BuildCommands) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(BuildCommands, 0, 4)
			} else {
				*out = BuildCommands{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v9 string
			v9 = string(in.String())
			*out = append(*out, v9)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComC3srModel18(out *jwriter.Writer, in BuildCommands) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v10, v11 := range in {
			if v10 > 0 {
				out.RawByte(',')
			}
			out.String(string(v11))
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v BuildCommands) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComC3srModel18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BuildCommands) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComC3srModel18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BuildCommands) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComC3srModel18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BuildCommands) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComC3srModel18(l, v)
}
func easyjsonC80ae7adDecodeGithubComC3srModel19(in *jlexer.Lexer, out *Base) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "deleted_at":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComC3srModel19(out *jwriter.Writer, in Base) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_id\":"
		out.RawString(prefix[1:])
		out.Raw((in.ID).MarshalJSON())
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"deleted_at\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Base) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComC3srModel19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Base) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComC3srModel19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Base) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComC3srModel19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Base) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComC3srModel19(l, v)
}
