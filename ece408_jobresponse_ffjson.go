// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: ece408_jobresponse.go

package model

import (
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *ECE408Ranking) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *ECE408Ranking) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"created_at":`)

	{

		obj, err = j.CreatedAt.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteString(`,"Username":`)
	fflib.WriteJsonString(buf, string(j.Username))
	buf.WriteString(`,"Teamname":`)
	fflib.WriteJsonString(buf, string(j.Teamname))
	buf.WriteString(`,"ProjectURL":`)
	fflib.WriteJsonString(buf, string(j.ProjectURL))
	if j.IsSubmission {
		buf.WriteString(`,"IsSubmission":true`)
	} else {
		buf.WriteString(`,"IsSubmission":false`)
	}
	buf.WriteString(`,"SubmissionTag":`)
	fflib.WriteJsonString(buf, string(j.SubmissionTag))
	buf.WriteByte('}')
	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *Ece408Inference) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *Ece408Inference) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"Model":`)
	fflib.WriteJsonString(buf, string(j.Model))
	buf.WriteString(`,"Correctness":`)
	fflib.AppendFloat(buf, float64(j.Correctness), 'g', -1, 64)
	buf.WriteString(`,"OpRuntimes":`)
	if j.OpRuntimes != nil {
		buf.WriteString(`[`)
		for i, v := range j.OpRuntimes {
			if i != 0 {
				buf.WriteString(`,`)
			}
			fflib.FormatBits2(buf, uint64(v), 10, v < 0)
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteString(`,"UserFullRuntime":`)
	fflib.FormatBits2(buf, uint64(j.UserFullRuntime), 10, j.UserFullRuntime < 0)
	buf.WriteString(`,"SystemFullRuntime":`)
	fflib.FormatBits2(buf, uint64(j.SystemFullRuntime), 10, j.SystemFullRuntime < 0)
	buf.WriteString(`,"ElapsedFullRuntime":`)
	fflib.FormatBits2(buf, uint64(j.ElapsedFullRuntime), 10, j.ElapsedFullRuntime < 0)
	buf.WriteByte('}')
	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *Ece408JobResponse) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *Ece408JobResponse) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"Inferences":`)
	if j.Inferences != nil {
		buf.WriteString(`[`)
		for i, v := range j.Inferences {
			if i != 0 {
				buf.WriteString(`,`)
			}

			{

				err = v.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteString(`,"created_at":`)

	{

		obj, err = j.CreatedAt.MarshalJSON()
		if err != nil {
			return err
		}
		buf.Write(obj)

	}
	buf.WriteString(`,"Username":`)
	fflib.WriteJsonString(buf, string(j.Username))
	buf.WriteString(`,"Teamname":`)
	fflib.WriteJsonString(buf, string(j.Teamname))
	buf.WriteString(`,"ProjectURL":`)
	fflib.WriteJsonString(buf, string(j.ProjectURL))
	if j.IsSubmission {
		buf.WriteString(`,"IsSubmission":true`)
	} else {
		buf.WriteString(`,"IsSubmission":false`)
	}
	buf.WriteString(`,"SubmissionTag":`)
	fflib.WriteJsonString(buf, string(j.SubmissionTag))
	buf.WriteByte('}')
	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *Ece408JobResponseCollection) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *Ece408JobResponseCollection) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"Session":`)
	/* Interface types must use runtime reflection. type=db.Database kind=interface */
	err = buf.Encode(j.Session)
	if err != nil {
		return err
	}
	buf.WriteByte('}')
	return nil
}
